
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b4  080049b4  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  080049b4  080049b4  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049b4  080049b4  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080049bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000194  08004b50  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08004b50  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9b0  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe7  00000000  00000000  0002abb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000743  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272bc  00000000  00000000  0002dcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b278  00000000  00000000  00054f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0e29  00000000  00000000  000601e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e38  00000000  00000000  00151010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00153e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048f0 	.word	0x080048f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	080048f0 	.word	0x080048f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 fb16 	bl	80038a8 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	; (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	; (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	; (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	; (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	; (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	; (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	; (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fbf0 	bl	8001aac <HAL_Delay>
	free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	; (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 faf1 	bl	80038b8 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	; (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	; (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa79 	bl	80007d8 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	; (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	; (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	; (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fada 	bl	80038b8 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	; (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	; (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa62 	bl	80007d8 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	; (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	; (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	; (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	; (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	; (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 faae 	bl	80038b8 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	; (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2307      	movs	r3, #7
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	; (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	; (8000464 <ble_init+0x1f4>)
 8000368:	f000 fafc 	bl	8000964 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	; (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	; (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fa9a 	bl	80038b8 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	; (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	; (8000478 <ble_init+0x208>)
 8000390:	f000 fa22 	bl	80007d8 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fa83 	bl	80038b8 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	; (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	; (8000480 <ble_init+0x210>)
 80003be:	f000 fa0b 	bl	80007d8 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fa6c 	bl	80038b8 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	; (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	; 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	; (8000488 <ble_init+0x218>)
 80003ec:	f000 f9f4 	bl	80007d8 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fa55 	bl	80038b8 <free>

	//This will start the advertisment,
	setConnectable();
 800040e:	f000 f963 	bl	80006d8 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	; (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	; (8000490 <ble_init+0x220>)
 8000418:	f000 fa2a 	bl	8000870 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	; (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	; (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	; (8000498 <ble_init+0x228>)
 8000428:	f000 fa5a 	bl	80008e0 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	; (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	; (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	; (80004a0 <ble_init+0x230>)
 8000438:	f000 fa52 	bl	80008e0 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800043c:	bf00      	nop
}
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200002c8 	.word	0x200002c8
 8000448:	200002d0 	.word	0x200002d0
 800044c:	20000000 	.word	0x20000000
 8000450:	200002c6 	.word	0x200002c6
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001b0 	.word	0x200001b0
 8000468:	200001b4 	.word	0x200001b4
 800046c:	200001b8 	.word	0x200001b8
 8000470:	200000ec 	.word	0x200000ec
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	200002bc 	.word	0x200002bc
 8000490:	200000f4 	.word	0x200000f4
 8000494:	200002c4 	.word	0x200002c4
 8000498:	20000114 	.word	0x20000114
 800049c:	200002c0 	.word	0x200002c0
 80004a0:	20000104 	.word	0x20000104

080004a4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	; (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	; (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 fdd3 	bl	800206c <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 faed 	bl	8001aac <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	; (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 fddf 	bl	800209c <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	; (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f002 fe55 	bl	800319c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	; (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 fdcf 	bl	800209c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 fad4 	bl	8001aac <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	; (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 fdc6 	bl	800209c <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	; (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f002 fe3c 	bl	800319c <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	; 0xff
 8000532:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	  dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	; (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f002 fe1d 	bl	800319c <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 fd90 	bl	800209c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 fd85 	bl	800209c <HAL_GPIO_WritePin>
        return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
  }
}
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004908 	.word	0x08004908
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	200002d4 	.word	0x200002d4
 80005b4:	200002d0 	.word	0x200002d0

080005b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		}
	}

return BLE_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	; (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	; (8000690 <sendCommand+0x8c>)
 8000626:	f001 fd39 	bl	800209c <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	; (8000694 <sendCommand+0x90>)
 800063a:	f002 fdaf 	bl	800319c <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <sendCommand+0x90>)
 800065a:	f002 fc2a 	bl	8002eb2 <HAL_SPI_Transmit>
		result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	  }else{
		result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <sendCommand+0x8c>)
 8000672:	f001 fd13 	bl	800209c <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08004910 	.word	0x08004910
 8000690:	48000c00 	.word	0x48000c00
 8000694:	200002d4 	.word	0x200002d4
 8000698:	200002d0 	.word	0x200002d0

0800069c <catchBLE>:

void catchBLE(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006a2:	217f      	movs	r1, #127	; 0x7f
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <catchBLE+0x34>)
 80006a6:	f7ff fefd 	bl	80004a4 <fetchBleEvent>
 80006aa:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d109      	bne.n	80006c6 <catchBLE+0x2a>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006b2:	2203      	movs	r2, #3
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <catchBLE+0x38>)
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <catchBLE+0x34>)
 80006b8:	f7ff ff7e 	bl	80005b8 <checkEventResp>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <catchBLE+0x2a>
			  setConnectable();
 80006c2:	f000 f809 	bl	80006d8 <setConnectable>
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001bc 	.word	0x200001bc
 80006d4:	200000e8 	.word	0x200000e8

080006d8 <setConnectable>:

void setConnectable(){
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80006de:	200c      	movs	r0, #12
 80006e0:	f003 f8e2 	bl	80038a8 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4a36      	ldr	r2, [pc, #216]	; (80007c4 <setConnectable+0xec>)
 80006ec:	6810      	ldr	r0, [r2, #0]
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	8891      	ldrh	r1, [r2, #4]
 80006f2:	7992      	ldrb	r2, [r2, #6]
 80006f4:	8099      	strh	r1, [r3, #4]
 80006f6:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3308      	adds	r3, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3309      	adds	r3, #9
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	330a      	adds	r3, #10
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	330b      	adds	r3, #11
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3307      	adds	r3, #7
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <setConnectable+0xf0>)
 8000722:	2208      	movs	r2, #8
 8000724:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <setConnectable+0xf0>)
 8000728:	2215      	movs	r2, #21
 800072a:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800072c:	2019      	movs	r0, #25
 800072e:	f003 f8bb 	bl	80038a8 <malloc>
 8000732:	4603      	mov	r3, r0
 8000734:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <setConnectable+0xf0>)
 800073a:	461c      	mov	r4, r3
 800073c:	4613      	mov	r3, r2
 800073e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000740:	6020      	str	r0, [r4, #0]
 8000742:	6061      	str	r1, [r4, #4]
 8000744:	60a2      	str	r2, [r4, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	330d      	adds	r3, #13
 800074e:	220c      	movs	r2, #12
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fc05 	bl	8003f62 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000758:	2119      	movs	r1, #25
 800075a:	68b8      	ldr	r0, [r7, #8]
 800075c:	f7ff ff52 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000760:	2007      	movs	r0, #7
 8000762:	f003 f8a1 	bl	80038a8 <malloc>
 8000766:	4603      	mov	r3, r0
 8000768:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 800076a:	bf00      	nop
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <setConnectable+0xf4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0fb      	beq.n	800076c <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 8000774:	2107      	movs	r1, #7
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fe94 	bl	80004a4 <fetchBleEvent>
 800077c:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d10f      	bne.n	80007a4 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000784:	2207      	movs	r2, #7
 8000786:	4912      	ldr	r1, [pc, #72]	; (80007d0 <setConnectable+0xf8>)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff15 	bl	80005b8 <checkEventResp>
 800078e:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d106      	bne.n	80007a4 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <setConnectable+0xfc>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <setConnectable+0xfc>)
 80007a2:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 f887 	bl	80038b8 <free>
	   free(discoverableCommand);
 80007aa:	68b8      	ldr	r0, [r7, #8]
 80007ac:	f003 f884 	bl	80038b8 <free>
	   free(localname);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f003 f881 	bl	80038b8 <free>
	   HAL_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f001 f978 	bl	8001aac <HAL_Delay>
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	20000078 	.word	0x20000078
 80007cc:	200002d0 	.word	0x200002d0
 80007d0:	20000088 	.word	0x20000088
 80007d4:	200002c6 	.word	0x200002c6

080007d8 <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ff0b 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	005a      	lsls	r2, r3, #1
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f856 	bl	80038a8 <malloc>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <BLE_command+0x90>)
 8000802:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000808:	e007      	b.n	800081a <BLE_command+0x42>
		   contatore++;
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	f247 5230 	movw	r2, #30000	; 0x7530
 8000816:	4293      	cmp	r3, r2
 8000818:	dc07      	bgt.n	800082a <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <BLE_command+0x94>)
 800081e:	f001 fc25 	bl	800206c <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f0      	beq.n	800080a <BLE_command+0x32>
 8000828:	e000      	b.n	800082c <BLE_command+0x54>
			   break;
 800082a:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <BLE_command+0x90>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	005a      	lsls	r2, r3, #1
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4619      	mov	r1, r3
 800083a:	f7ff fe33 	bl	80004a4 <fetchBleEvent>
 800083e:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <BLE_command+0x90>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feb2 	bl	80005b8 <checkEventResp>
 8000854:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000856:	200a      	movs	r0, #10
 8000858:	f001 f928 	bl	8001aac <HAL_Delay>


	return response;
 800085c:	697b      	ldr	r3, [r7, #20]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002c8 	.word	0x200002c8
 800086c:	48001000 	.word	0x48001000

08000870 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <addService+0x60>)
 800087e:	2210      	movs	r2, #16
 8000880:	68f9      	ldr	r1, [r7, #12]
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fb6d 	bl	8003f62 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <addService+0x64>)
 800088e:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2307      	movs	r3, #7
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <addService+0x68>)
 8000898:	2117      	movs	r1, #23
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <addService+0x64>)
 800089c:	f7ff ff9c 	bl	80007d8 <BLE_command>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10a      	bne.n	80008bc <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <addService+0x6c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	79da      	ldrb	r2, [r3, #7]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <addService+0x6c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	3301      	adds	r3, #1
 80008b8:	7a12      	ldrb	r2, [r2, #8]
 80008ba:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <addService+0x6c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fff9 	bl	80038b8 <free>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000095 	.word	0x20000095
 80008d4:	20000090 	.word	0x20000090
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	200002c8 	.word	0x200002c8

080008e0 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <addCharacteristic+0x74>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	68f9      	ldr	r1, [r7, #12]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fb34 	bl	8003f62 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <addCharacteristic+0x78>)
 8000900:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	785a      	ldrb	r2, [r3, #1]
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <addCharacteristic+0x78>)
 8000908:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <addCharacteristic+0x78>)
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <addCharacteristic+0x78>)
 8000912:	7e3b      	ldrb	r3, [r7, #24]
 8000914:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000916:	2301      	movs	r3, #1
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2307      	movs	r3, #7
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <addCharacteristic+0x7c>)
 800091e:	211e      	movs	r1, #30
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <addCharacteristic+0x78>)
 8000922:	f7ff ff59 	bl	80007d8 <BLE_command>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10a      	bne.n	8000942 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <addCharacteristic+0x80>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	79da      	ldrb	r2, [r3, #7]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <addCharacteristic+0x80>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	7a12      	ldrb	r2, [r2, #8]
 8000940:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <addCharacteristic+0x80>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f002 ffb6 	bl	80038b8 <free>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000b7 	.word	0x200000b7
 8000958:	200000b0 	.word	0x200000b0
 800095c:	200000d0 	.word	0x200000d0
 8000960:	200002c8 	.word	0x200002c8

08000964 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af02      	add	r7, sp, #8
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	3306      	adds	r3, #6
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <updateCharValue+0x9c>)
 800097c:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <updateCharValue+0x9c>)
 8000984:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	785a      	ldrb	r2, [r3, #1]
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <updateCharValue+0x9c>)
 800098c:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <updateCharValue+0x9c>)
 8000994:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	785a      	ldrb	r2, [r3, #1]
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <updateCharValue+0x9c>)
 800099c:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <updateCharValue+0x9c>)
 80009a4:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <updateCharValue+0x9c>)
 80009ac:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	330a      	adds	r3, #10
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 ff78 	bl	80038a8 <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 80009bc:	220a      	movs	r2, #10
 80009be:	4910      	ldr	r1, [pc, #64]	; (8000a00 <updateCharValue+0x9c>)
 80009c0:	6978      	ldr	r0, [r7, #20]
 80009c2:	f003 face 	bl	8003f62 <memcpy>
	memcpy(commandComplete+10,data,size);
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	330a      	adds	r3, #10
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	6a39      	ldr	r1, [r7, #32]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fac7 	bl	8003f62 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f103 010a 	add.w	r1, r3, #10
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2307      	movs	r3, #7
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <updateCharValue+0xa0>)
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff fef8 	bl	80007d8 <BLE_command>

	free(commandComplete);
 80009e8:	6978      	ldr	r0, [r7, #20]
 80009ea:	f002 ff65 	bl	80038b8 <free>
	free(rxEvent);
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <updateCharValue+0xa4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 ff60 	bl	80038b8 <free>
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000d8 	.word	0x200000d8
 8000a04:	200000d0 	.word	0x200000d0
 8000a08:	200002c8 	.word	0x200002c8

08000a0c <i2c_init>:
 */


#include <stm32l475xx.h>
#include "i2c.h"
void i2c_init(){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0


	// Turn on HSI 16 MHz clock
	RCC->CR |= RCC_CR_HSION;
 8000a12:	4b55      	ldr	r3, [pc, #340]	; (8000b68 <i2c_init+0x15c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a54      	ldr	r2, [pc, #336]	; (8000b68 <i2c_init+0x15c>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));
 8000a1e:	bf00      	nop
 8000a20:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <i2c_init+0x15c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f9      	beq.n	8000a20 <i2c_init+0x14>

	// Use HSI16 for my I2C
	RCC->CCIPR |= RCC_CCIPR_I2C2SEL_1;
 8000a2c:	4b4e      	ldr	r3, [pc, #312]	; (8000b68 <i2c_init+0x15c>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a4d      	ldr	r2, [pc, #308]	; (8000b68 <i2c_init+0x15c>)
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	// Enable I2C2 and GPIOB
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <i2c_init+0x15c>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a40:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <i2c_init+0x15c>)
 8000a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a46:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <i2c_init+0x15c>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <i2c_init+0x15c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIO PB10 and PB11 to be in Alternate Function Mode
	GPIOB->MODER &= ~GPIO_MODER_MODE10_Msk;
 8000a54:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <i2c_init+0x160>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <i2c_init+0x160>)
 8000a5a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <i2c_init+0x160>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <i2c_init+0x160>)
 8000a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~GPIO_MODER_MODE11_Msk;
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <i2c_init+0x160>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <i2c_init+0x160>)
 8000a72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a76:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <i2c_init+0x160>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <i2c_init+0x160>)
 8000a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a82:	6013      	str	r3, [r2, #0]

	// Push Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT10;
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <i2c_init+0x160>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <i2c_init+0x160>)
 8000a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a8e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT11;
 8000a90:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <i2c_init+0x160>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <i2c_init+0x160>)
 8000a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a9a:	6053      	str	r3, [r2, #4]

	GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11; // Set to open-drain
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <i2c_init+0x160>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <i2c_init+0x160>)
 8000aa2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000aa6:	6053      	str	r3, [r2, #4]


	// Set PB10 and PB11 to Pull up
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_0;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <i2c_init+0x160>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <i2c_init+0x160>)
 8000aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <i2c_init+0x160>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <i2c_init+0x160>)
 8000aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000abe:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <i2c_init+0x160>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <i2c_init+0x160>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_1;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <i2c_init+0x160>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <i2c_init+0x160>)
 8000ad2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ad6:	6093      	str	r3, [r2, #8]

	// Configure PB10 and PB11 to SCL and SDA for I2C2
	GPIOB->AFR[1] |= 4 << GPIO_AFRH_AFSEL10_Pos;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <i2c_init+0x160>)
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <i2c_init+0x160>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 4 << GPIO_AFRH_AFSEL11_Pos;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <i2c_init+0x160>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <i2c_init+0x160>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6253      	str	r3, [r2, #36]	; 0x24

	// I2C Configuration Stage, per the stm32 manual

	// Step 1
	// Clear PE bit in I2C_CR1
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <i2c_init+0x164>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <i2c_init+0x164>)
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

	// Step 2
	// Configure ANFOFF and DNF[3:0] in I2C_CR1
	// will leave the  defaults
	I2C2->CR1;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <i2c_init+0x164>)
 8000afe:	681b      	ldr	r3, [r3, #0]
	// Step 3
	// Configure PRESC[3:0],
	// SDADEL[3:0], SCLDEL[3:0], SCLH[7:0],
	// SCLL[7:0] in I2C_TIMINGR

	uint32_t PRESC = 3;
 8000b00:	2303      	movs	r3, #3
 8000b02:	617b      	str	r3, [r7, #20]
	uint32_t SCLL = 0x13;
 8000b04:	2313      	movs	r3, #19
 8000b06:	613b      	str	r3, [r7, #16]
	uint32_t SCLH = 0xF;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60fb      	str	r3, [r7, #12]
	uint32_t SDADEL = 0x2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
	uint32_t SCLDEL = 0x4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	607b      	str	r3, [r7, #4]

	I2C2->TIMINGR &= ~(I2C_TIMINGR_PRESC_Msk | I2C_TIMINGR_SCLDEL_Msk | I2C_TIMINGR_SDADEL_Msk | I2C_TIMINGR_SCLH_Msk | I2C_TIMINGR_SCLL_Msk);
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <i2c_init+0x164>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <i2c_init+0x164>)
 8000b1a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000b1e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (PRESC << I2C_TIMINGR_PRESC_Pos) | (SDADEL << I2C_TIMINGR_SDADEL_Pos) | (SCLDEL << I2C_TIMINGR_SCLDEL_Pos) | (SCLH << I2C_TIMINGR_SCLH_Pos) | (SCLL << I2C_TIMINGR_SCLL_Pos);
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <i2c_init+0x164>)
 8000b22:	691a      	ldr	r2, [r3, #16]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	0719      	lsls	r1, r3, #28
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	041b      	lsls	r3, r3, #16
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	051b      	lsls	r3, r3, #20
 8000b32:	4319      	orrs	r1, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	490c      	ldr	r1, [pc, #48]	; (8000b70 <i2c_init+0x164>)
 8000b40:	4313      	orrs	r3, r2
 8000b42:	610b      	str	r3, [r1, #16]



	// Step 4
	// Configure NOSTRETCH in I2C_CR1
	I2C2->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <i2c_init+0x164>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <i2c_init+0x164>)
 8000b4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b4e:	6013      	str	r3, [r2, #0]


	// Step 5
	// Set PE bit in I2C_CR1, enabling I2C

	I2C2->CR1 |= I2C_CR1_PE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <i2c_init+0x164>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <i2c_init+0x164>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]

}
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	40005800 	.word	0x40005800

08000b74 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	603a      	str	r2, [r7, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]


	// READ vs WRITE gate
	if(dir){
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d007      	beq.n	8000ba0 <i2c_transaction+0x2c>
		return read_transaction(address, data, len);
 8000b90:	797a      	ldrb	r2, [r7, #5]
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	6839      	ldr	r1, [r7, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f80e 	bl	8000bb8 <read_transaction>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	e006      	b.n	8000bae <i2c_transaction+0x3a>
	}
	else{
		return write_transaction(address, data, len);
 8000ba0:	797a      	ldrb	r2, [r7, #5]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	6839      	ldr	r1, [r7, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f83a 	bl	8000c20 <write_transaction>
 8000bac:	4603      	mov	r3, r0
	}




}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <read_transaction>:

uint8_t read_transaction(uint8_t address, uint8_t* data, uint8_t len){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]

	// All reads require a register write, len = 1
	write_transaction(address, data, 1);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f826 	bl	8000c20 <write_transaction>

	uint32_t NBYTES = len << I2C_CR2_NBYTES_Pos;
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	041b      	lsls	r3, r3, #16
 8000bd8:	617b      	str	r3, [r7, #20]
	uint32_t RD_WRN = 1 << I2C_CR2_RD_WRN_Pos;
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bde:	613b      	str	r3, [r7, #16]
	uint32_t AUTOEND = I2C_CR2_AUTOEND;
 8000be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000be4:	60fb      	str	r3, [r7, #12]

	I2C2->ICR |= I2C_ICR_STOPCF;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <read_transaction+0x64>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <read_transaction+0x64>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	61d3      	str	r3, [r2, #28]

	// Send another START signaling we want to read now
	address_phase(address, NBYTES, RD_WRN, AUTOEND);
 8000bf2:	79f8      	ldrb	r0, [r7, #7]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	6979      	ldr	r1, [r7, #20]
 8000bfa:	f000 f845 	bl	8000c88 <address_phase>

	// Wait until there's something to read
	while(!(I2C2->ISR & I2C_ISR_RXNE));
 8000bfe:	bf00      	nop
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <read_transaction+0x64>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f9      	beq.n	8000c00 <read_transaction+0x48>
	uint8_t value = I2C2->RXDR;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <read_transaction+0x64>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	72fb      	strb	r3, [r7, #11]

	return value;
 8000c12:	7afb      	ldrb	r3, [r7, #11]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40005800 	.word	0x40005800

08000c20 <write_transaction>:

uint8_t write_transaction(uint8_t address, uint8_t* data, uint8_t len){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]

	uint32_t NBYTES = len << I2C_CR2_NBYTES_Pos;
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	613b      	str	r3, [r7, #16]
	uint32_t RD_WRN = 0 << I2C_CR2_RD_WRN_Pos;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
	uint32_t AUTOEND = I2C_CR2_AUTOEND;
 8000c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c3e:	60bb      	str	r3, [r7, #8]


	// Send the address over I2C, and configure CR2 bits
	address_phase(address, NBYTES, RD_WRN, AUTOEND);
 8000c40:	79f8      	ldrb	r0, [r7, #7]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	6939      	ldr	r1, [r7, #16]
 8000c48:	f000 f81e 	bl	8000c88 <address_phase>


	// Write len bytes over I2C
	// Note: The first iteration writes the register address
	for(uint8_t i = 0; i < len; i++){
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	75fb      	strb	r3, [r7, #23]
 8000c50:	e00f      	b.n	8000c72 <write_transaction+0x52>
		// Wait until TXIS is 1
		while(!(I2C2->ISR & I2C_ISR_TXIS));
 8000c52:	bf00      	nop
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <write_transaction+0x64>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f9      	beq.n	8000c54 <write_transaction+0x34>

		// Write to Transmitter Register
		I2C2->TXDR = *(data)++;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	603a      	str	r2, [r7, #0]
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <write_transaction+0x64>)
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
	for(uint8_t i = 0; i < len; i++){
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	75fb      	strb	r3, [r7, #23]
 8000c72:	7dfa      	ldrb	r2, [r7, #23]
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3eb      	bcc.n	8000c52 <write_transaction+0x32>
	}
	return 0x00;
 8000c7a:	2300      	movs	r3, #0

}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40005800 	.word	0x40005800

08000c88 <address_phase>:

// Configures CR2 and sends the slave address over i2c
void address_phase(uint8_t slave_address, uint32_t NBYTES, uint32_t RD_WRN, uint32_t AUTOEND){
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
	I2C2->CR2 = I2C_CR2_START | slave_address | NBYTES | RD_WRN | AUTOEND;
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <address_phase+0x34>)
 8000ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cac:	6053      	str	r3, [r2, #4]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40005800 	.word	0x40005800

08000cc0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	/* Enable the GPIOA clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <leds_init+0xd0>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <leds_init+0xd0>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
	/* Configure PA5 as an output by clearing all bits and setting the mode */
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000cde:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000cf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cfa:	f023 0320 	bic.w	r3, r3, #32
 8000cfe:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0e:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000d1e:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2a:	f023 0320 	bic.w	r3, r3, #32
 8000d2e:	6153      	str	r3, [r2, #20]


	// GPIOB PB14 Setup
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <leds_init+0xd0>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <leds_init+0xd0>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <leds_init+0xd4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <leds_init+0xd4>)
 8000d42:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d46:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <leds_init+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <leds_init+0xd4>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <leds_init+0xd4>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <leds_init+0xd4>)
 8000d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d5e:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <leds_init+0xd4>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <leds_init+0xd4>)
 8000d66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d6a:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <leds_init+0xd4>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <leds_init+0xd4>)
 8000d72:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d76:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <leds_init+0xd4>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <leds_init+0xd4>)
 8000d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d82:	6153      	str	r3, [r2, #20]




}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000400 	.word	0x48000400

08000d98 <leds_set>:

void leds_set(uint8_t led)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	// bit 0 -> PA5
	// bit 1 -> PB14
	// TODO implement this
	if(led & 1){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <leds_set+0x26>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6153      	str	r3, [r2, #20]
 8000dbc:	e007      	b.n	8000dce <leds_set+0x36>
	}
	else {
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dc8:	f023 0320 	bic.w	r3, r3, #32
 8000dcc:	6153      	str	r3, [r2, #20]
	}

	if(led & 2){
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <leds_set+0x4e>
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <leds_set+0x68>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <leds_set+0x68>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6153      	str	r3, [r2, #20]
	}
	else {
		GPIOB->ODR &= ~GPIO_ODR_OD14;
	}

}
 8000de4:	e005      	b.n	8000df2 <leds_set+0x5a>
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <leds_set+0x68>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <leds_set+0x68>)
 8000dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000df0:	6153      	str	r3, [r2, #20]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	48000400 	.word	0x48000400

08000e04 <lsm6dsl_init>:
 */

#include <stm32l475xx.h>
#include "lsm6dsl.h"
#include "i2c.h"
void lsm6dsl_init(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

	// 1. Write CTRL1_XL = 60h // Acc = 416 Hz (High-Performance mode)
	uint8_t data1[2] = {CTRL1_XL, 0x60};
 8000e0a:	f246 0310 	movw	r3, #24592	; 0x6010
 8000e0e:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(WRITE_ADR, WRITE_I2C, data1, 2);
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	2302      	movs	r3, #2
 8000e14:	2100      	movs	r1, #0
 8000e16:	20d4      	movs	r0, #212	; 0xd4
 8000e18:	f7ff feac 	bl	8000b74 <i2c_transaction>

	// 2. Write INT1_CTRL = 01h // Acc data-ready interrupt on INT1
	uint8_t data2[2] = {INT1_CTRL, 0x01};
 8000e1c:	f240 130d 	movw	r3, #269	; 0x10d
 8000e20:	803b      	strh	r3, [r7, #0]
	i2c_transaction(WRITE_ADR, WRITE_I2C, data2, 2);
 8000e22:	463a      	mov	r2, r7
 8000e24:	2302      	movs	r3, #2
 8000e26:	2100      	movs	r1, #0
 8000e28:	20d4      	movs	r0, #212	; 0xd4
 8000e2a:	f7ff fea3 	bl	8000b74 <i2c_transaction>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b088      	sub	sp, #32
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]

	// Check the status register for available data
	uint8_t status = STATUS_REG;
 8000e42:	231e      	movs	r3, #30
 8000e44:	77fb      	strb	r3, [r7, #31]
	uint8_t result = i2c_transaction(READ_ADR, READ_I2C, status, 1);
 8000e46:	7ffb      	ldrb	r3, [r7, #31]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	20d5      	movs	r0, #213	; 0xd5
 8000e50:	f7ff fe90 	bl	8000b74 <i2c_transaction>
 8000e54:	4603      	mov	r3, r0
 8000e56:	77bb      	strb	r3, [r7, #30]

	// Zero out x y and z
	*x = 0;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
	*y = 0;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
	*z = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	801a      	strh	r2, [r3, #0]

	// read low and high registers for x, y, and z.
	uint8_t register_addr = OUTX_L_XL;
 8000e6a:	2328      	movs	r3, #40	; 0x28
 8000e6c:	75fb      	strb	r3, [r7, #23]
	uint8_t x_low = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000e6e:	f107 0217 	add.w	r2, r7, #23
 8000e72:	2301      	movs	r3, #1
 8000e74:	2101      	movs	r1, #1
 8000e76:	20d5      	movs	r0, #213	; 0xd5
 8000e78:	f7ff fe7c 	bl	8000b74 <i2c_transaction>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	777b      	strb	r3, [r7, #29]
	*x |= x_low;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e86:	7f7b      	ldrb	r3, [r7, #29]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	801a      	strh	r2, [r3, #0]

	register_addr = OUTX_H_XL;
 8000e92:	2329      	movs	r3, #41	; 0x29
 8000e94:	75fb      	strb	r3, [r7, #23]
	uint8_t x_high = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000e96:	f107 0217 	add.w	r2, r7, #23
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	20d5      	movs	r0, #213	; 0xd5
 8000ea0:	f7ff fe68 	bl	8000b74 <i2c_transaction>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	773b      	strb	r3, [r7, #28]
	*x |= x_high << 8;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000eae:	7f3b      	ldrb	r3, [r7, #28]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	801a      	strh	r2, [r3, #0]

	register_addr = OUTY_L_XL;
 8000ebc:	232a      	movs	r3, #42	; 0x2a
 8000ebe:	75fb      	strb	r3, [r7, #23]
	uint8_t y_low = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000ec0:	f107 0217 	add.w	r2, r7, #23
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	20d5      	movs	r0, #213	; 0xd5
 8000eca:	f7ff fe53 	bl	8000b74 <i2c_transaction>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	76fb      	strb	r3, [r7, #27]
	*y |= y_low;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed8:	7efb      	ldrb	r3, [r7, #27]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	801a      	strh	r2, [r3, #0]

	register_addr = OUTY_H_XL;
 8000ee4:	232b      	movs	r3, #43	; 0x2b
 8000ee6:	75fb      	strb	r3, [r7, #23]
	uint8_t y_high = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000ee8:	f107 0217 	add.w	r2, r7, #23
 8000eec:	2301      	movs	r3, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	20d5      	movs	r0, #213	; 0xd5
 8000ef2:	f7ff fe3f 	bl	8000b74 <i2c_transaction>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	76bb      	strb	r3, [r7, #26]
	*y |= y_high << 8;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f00:	7ebb      	ldrb	r3, [r7, #26]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	801a      	strh	r2, [r3, #0]

	register_addr = OUTZ_L_XL;
 8000f0e:	232c      	movs	r3, #44	; 0x2c
 8000f10:	75fb      	strb	r3, [r7, #23]
	uint8_t z_low = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000f12:	f107 0217 	add.w	r2, r7, #23
 8000f16:	2301      	movs	r3, #1
 8000f18:	2101      	movs	r1, #1
 8000f1a:	20d5      	movs	r0, #213	; 0xd5
 8000f1c:	f7ff fe2a 	bl	8000b74 <i2c_transaction>
 8000f20:	4603      	mov	r3, r0
 8000f22:	767b      	strb	r3, [r7, #25]
	*z |= z_low;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f2a:	7e7b      	ldrb	r3, [r7, #25]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	801a      	strh	r2, [r3, #0]

	register_addr = OUTZ_H_XL;
 8000f36:	232d      	movs	r3, #45	; 0x2d
 8000f38:	75fb      	strb	r3, [r7, #23]
	uint8_t z_high = i2c_transaction(READ_ADR, READ_I2C, &register_addr, 1);
 8000f3a:	f107 0217 	add.w	r2, r7, #23
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2101      	movs	r1, #1
 8000f42:	20d5      	movs	r0, #213	; 0xd5
 8000f44:	f7ff fe16 	bl	8000b74 <i2c_transaction>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	763b      	strb	r3, [r7, #24]
	*z |= z_high << 8;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f52:	7e3b      	ldrb	r3, [r7, #24]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	801a      	strh	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f90:	e000      	b.n	8000f94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <TIM5_IRQHandler>:
volatile uint8_t lost_mode = 0;

volatile uint8_t send_bluetooth = 0;
volatile uint8_t seconds_lost = 0;

void TIM5_IRQHandler(){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	send_bluetooth = 1;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <TIM5_IRQHandler+0x30>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	seconds_lost++;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <TIM5_IRQHandler+0x34>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <TIM5_IRQHandler+0x34>)
 8000fce:	701a      	strb	r2, [r3, #0]
	TIM5->SR &= ~TIM_SR_UIF;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <TIM5_IRQHandler+0x38>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <TIM5_IRQHandler+0x38>)
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6113      	str	r3, [r2, #16]
};
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	200002ce 	.word	0x200002ce
 8000fec:	200002cf 	.word	0x200002cf
 8000ff0:	40000c00 	.word	0x40000c00

08000ff4 <TIM3_IRQHandler>:

// Interrupt handler for LED timer
void TIM3_IRQHandler() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

//	leds_set(0b11);

	// If Preamble + ID transmitted, send minutes lost next
	if(signal_shift == 0){
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <TIM3_IRQHandler+0x6c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <TIM3_IRQHandler+0x2a>
		leds_set(minutes_lost & 0b11);
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <TIM3_IRQHandler+0x70>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fec1 	bl	8000d98 <leds_set>
		signal_shift = 32;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <TIM3_IRQHandler+0x6c>)
 8001018:	2220      	movs	r2, #32
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e015      	b.n	800104a <TIM3_IRQHandler+0x56>
	}
	else {
		// Shift my signal so that we isolate the current 2 bits
		uint8_t led_state = (signal >> signal_shift) & led_mask;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <TIM3_IRQHandler+0x74>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <TIM3_IRQHandler+0x6c>)
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	40d3      	lsrs	r3, r2
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <TIM3_IRQHandler+0x78>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4013      	ands	r3, r2
 8001032:	71fb      	strb	r3, [r7, #7]
		leds_set(led_state);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff feae 	bl	8000d98 <leds_set>

		// Decrease shift by 2, so we get the next two bits on the next interrupt
		signal_shift -= 2;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <TIM3_IRQHandler+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3b02      	subs	r3, #2
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <TIM3_IRQHandler+0x6c>)
 8001048:	701a      	strb	r2, [r3, #0]
	}
	TIM3->SR &= ~TIM_SR_UIF;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <TIM3_IRQHandler+0x7c>)
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <TIM3_IRQHandler+0x7c>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6113      	str	r3, [r2, #16]
};
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000129 	.word	0x20000129
 8001064:	200002cc 	.word	0x200002cc
 8001068:	20000124 	.word	0x20000124
 800106c:	20000128 	.word	0x20000128
 8001070:	40000400 	.word	0x40000400

08001074 <TIM2_IRQHandler>:


// Interrupt handler for lost Timer
void TIM2_IRQHandler() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

	// If we are entering lost mode, enable the LED timer and the bluetooth time
	if(!lost_mode){
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <TIM2_IRQHandler+0x5c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d111      	bne.n	80010a6 <TIM2_IRQHandler+0x32>
		timer_init(TIM3);
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <TIM2_IRQHandler+0x60>)
 8001084:	f000 fbe8 	bl	8001858 <timer_init>
		timer_reset(TIM3);
 8001088:	4812      	ldr	r0, [pc, #72]	; (80010d4 <TIM2_IRQHandler+0x60>)
 800108a:	f000 fc4f 	bl	800192c <timer_reset>
		timer_set_ms(TIM3, 50);
 800108e:	2132      	movs	r1, #50	; 0x32
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <TIM2_IRQHandler+0x60>)
 8001092:	f000 fc58 	bl	8001946 <timer_set_ms>

		timer_init(TIM5);
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <TIM2_IRQHandler+0x64>)
 8001098:	f000 fbde 	bl	8001858 <timer_init>
//		timer_reset(TIM5);
		timer_set_ms(TIM5, 1000);
 800109c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <TIM2_IRQHandler+0x64>)
 80010a2:	f000 fc50 	bl	8001946 <timer_set_ms>
	}

	// Set lost mode to true, and increment the number of minutes we've been lost
	minutes_lost++;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <TIM2_IRQHandler+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <TIM2_IRQHandler+0x68>)
 80010b2:	701a      	strb	r2, [r3, #0]
	lost_mode = 1;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <TIM2_IRQHandler+0x5c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

	TIM2->SR &= ~TIM_SR_UIF;
 80010ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6113      	str	r3, [r2, #16]
};
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200002cd 	.word	0x200002cd
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40000c00 	.word	0x40000c00
 80010dc:	200002cc 	.word	0x200002cc

080010e0 <_write>:


// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    int i = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e009      	b.n	800110a <_write+0x2a>
        ITM_SendChar(*ptr++);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	60ba      	str	r2, [r7, #8]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff32 	bl	8000f68 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	dbf1      	blt.n	80010f6 <_write+0x16>
    }
    return len;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af02      	add	r7, sp, #8
	printf("Starting I2C...\n");
 8001122:	4863      	ldr	r0, [pc, #396]	; (80012b0 <main+0x194>)
 8001124:	f002 fd92 	bl	8003c4c <puts>
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001128:	f000 fc4b 	bl	80019c2 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800112c:	f000 f8d8 	bl	80012e0 <SystemClock_Config>

	printf("HELLO...\n");
 8001130:	4860      	ldr	r0, [pc, #384]	; (80012b4 <main+0x198>)
 8001132:	f002 fd8b 	bl	8003c4c <puts>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001136:	f000 f957 	bl	80013e8 <MX_GPIO_Init>
	MX_SPI3_Init();
 800113a:	f000 f917 	bl	800136c <MX_SPI3_Init>

	//RESET BLE MODULE
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f000 ffa8 	bl	800209c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f000 fcad 	bl	8001aac <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 ff9e 	bl	800209c <HAL_GPIO_WritePin>

	ble_init();
 8001160:	f7ff f886 	bl	8000270 <ble_init>

	HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f000 fca1 	bl	8001aac <HAL_Delay>

  // My code start

	leds_init();
 800116a:	f7ff fda9 	bl	8000cc0 <leds_init>

	printf("Starting I2C...\n");
 800116e:	4850      	ldr	r0, [pc, #320]	; (80012b0 <main+0x194>)
 8001170:	f002 fd6c 	bl	8003c4c <puts>
	i2c_init();
 8001174:	f7ff fc4a 	bl	8000a0c <i2c_init>

	lsm6dsl_init();
 8001178:	f7ff fe44 	bl	8000e04 <lsm6dsl_init>

	int16_t x = 0, y = 0, z = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	82fb      	strh	r3, [r7, #22]
 8001180:	2300      	movs	r3, #0
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	827b      	strh	r3, [r7, #18]

	// Initialize 60s lost timer
	timer_init(TIM2);
 8001188:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800118c:	f000 fb64 	bl	8001858 <timer_init>
	timer_reset(TIM2);
 8001190:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001194:	f000 fbca 	bl	800192c <timer_reset>
	timer_set_ms(TIM2, 50 * 100);
 8001198:	f241 3188 	movw	r1, #5000	; 0x1388
 800119c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011a0:	f000 fbd1 	bl	8001946 <timer_set_ms>

	// I2C data retrieval loop
	uint8_t moving;


	uint8_t standby = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	767b      	strb	r3, [r7, #25]

	int16_t last_x = 0, last_y = 0 , last_z = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	83fb      	strh	r3, [r7, #30]
 80011ac:	2300      	movs	r3, #0
 80011ae:	83bb      	strh	r3, [r7, #28]
 80011b0:	2300      	movs	r3, #0
 80011b2:	837b      	strh	r3, [r7, #26]

	while (1)
	{
		lsm6dsl_read_xyz(&x, &y, &z);
 80011b4:	f107 0212 	add.w	r2, r7, #18
 80011b8:	f107 0114 	add.w	r1, r7, #20
 80011bc:	f107 0316 	add.w	r3, r7, #22
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe38 	bl	8000e36 <lsm6dsl_read_xyz>

		moving  = (abs(x - last_x) > MOVE_THRESHOLD) || (abs(y - last_y) > MOVE_THRESHOLD) || (abs(z - last_z) > MOVE_THRESHOLD);
 80011c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	425b      	neglt	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	429a      	cmp	r2, r3
 80011e0:	d81b      	bhi.n	800121a <main+0xfe>
 80011e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bfb8      	it	lt
 80011f2:	425b      	neglt	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d80d      	bhi.n	800121a <main+0xfe>
 80011fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001202:	461a      	mov	r2, r3
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	bfb8      	it	lt
 800120e:	425b      	neglt	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	429a      	cmp	r2, r3
 8001218:	d901      	bls.n	800121e <main+0x102>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <main+0x104>
 800121e:	2300      	movs	r3, #0
 8001220:	763b      	strb	r3, [r7, #24]

		last_x = x;
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	83fb      	strh	r3, [r7, #30]
		last_y = y;
 8001226:	8abb      	ldrh	r3, [r7, #20]
 8001228:	83bb      	strh	r3, [r7, #28]
		last_z = z;
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	837b      	strh	r3, [r7, #26]

		// If we are moving, reset the lost timer, disable the LED timer
		// and reset out lost mode state variables.
		if(moving){
 800122e:	7e3b      	ldrb	r3, [r7, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d015      	beq.n	8001260 <main+0x144>
			timer_reset(TIM2);
 8001234:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001238:	f000 fb78 	bl	800192c <timer_reset>
			TIM3->CR1 = 0;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <main+0x19c>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
			TIM5->CR1 = 0;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <main+0x1a0>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
			lost_mode = 0;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <main+0x1a4>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			minutes_lost = 0;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <main+0x1a8>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
			seconds_lost = 0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <main+0x1ac>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			leds_set(0b00);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fd9c 	bl	8000d98 <leds_set>
		}
		if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001260:	7e7b      	ldrb	r3, [r7, #25]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <main+0x15e>
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <main+0x1b0>)
 800126a:	f000 feff 	bl	800206c <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <main+0x15e>
		  catchBLE();
 8001274:	f7ff fa12 	bl	800069c <catchBLE>
 8001278:	e018      	b.n	80012ac <main+0x190>
		}
		else{
			if(send_bluetooth){
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <main+0x1b4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d097      	beq.n	80011b4 <main+0x98>
//				HAL_Delay(1000);

				// Send a string to the NORDIC UART service, remember to not include the newline
//				unsigned char test_str[] = "HELLO HOW MANY?";
				unsigned char test_str[16];
				sprintf((char *) test_str, "Seconds: %d", seconds_lost);
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <main+0x1ac>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	463b      	mov	r3, r7
 800128e:	4911      	ldr	r1, [pc, #68]	; (80012d4 <main+0x1b8>)
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fce3 	bl	8003c5c <siprintf>
				updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001296:	463b      	mov	r3, r7
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	230f      	movs	r3, #15
 800129c:	2200      	movs	r2, #0
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <main+0x1bc>)
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <main+0x1c0>)
 80012a2:	f7ff fb5f 	bl	8000964 <updateCharValue>
				send_bluetooth = 0;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <main+0x1b4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		lsm6dsl_read_xyz(&x, &y, &z);
 80012ac:	e782      	b.n	80011b4 <main+0x98>
 80012ae:	bf00      	nop
 80012b0:	08004918 	.word	0x08004918
 80012b4:	08004928 	.word	0x08004928
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40000c00 	.word	0x40000c00
 80012c0:	200002cd 	.word	0x200002cd
 80012c4:	200002cc 	.word	0x200002cc
 80012c8:	200002cf 	.word	0x200002cf
 80012cc:	48001000 	.word	0x48001000
 80012d0:	200002ce 	.word	0x200002ce
 80012d4:	08004934 	.word	0x08004934
 80012d8:	200002c4 	.word	0x200002c4
 80012dc:	200002bc 	.word	0x200002bc

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	; 0x58
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fdac 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001306:	f000 ff13 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001310:	f000 f902 	bl	8001518 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001314:	2310      	movs	r3, #16
 8001316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001320:	2370      	movs	r3, #112	; 0x70
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4618      	mov	r0, r3
 800132e:	f000 ff55 	bl	80021dc <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001338:	f000 f8ee 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fb1d 	bl	8002994 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001360:	f000 f8da 	bl	8001518 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_SPI3_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_SPI3_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_SPI3_Init+0x74>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_SPI3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI3_Init+0x74>)
 8001386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800138a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_SPI3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI3_Init+0x74>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_SPI3_Init+0x74>)
 80013cc:	f001 fcce 	bl	8002d6c <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f000 f89f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002d4 	.word	0x200002d4
 80013e4:	40003c00 	.word	0x40003c00

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <MX_GPIO_Init+0x124>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <MX_GPIO_Init+0x124>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <MX_GPIO_Init+0x124>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_GPIO_Init+0x124>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a3c      	ldr	r2, [pc, #240]	; (800150c <MX_GPIO_Init+0x124>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_GPIO_Init+0x124>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_GPIO_Init+0x124>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a36      	ldr	r2, [pc, #216]	; (800150c <MX_GPIO_Init+0x124>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <MX_GPIO_Init+0x124>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_GPIO_Init+0x124>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <MX_GPIO_Init+0x124>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_GPIO_Init+0x124>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_GPIO_Init+0x124>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <MX_GPIO_Init+0x124>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <MX_GPIO_Init+0x124>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f000 fe0d 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_GPIO_Init+0x128>)
 800148a:	f000 fe07 	bl	800209c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f000 fe00 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800149c:	2340      	movs	r3, #64	; 0x40
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4818      	ldr	r0, [pc, #96]	; (8001514 <MX_GPIO_Init+0x12c>)
 80014b2:	f000 fc31 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80014b6:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f000 fc21 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_GPIO_Init+0x128>)
 80014f0:	f000 fc12 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2017      	movs	r0, #23
 80014fa:	f000 fbd6 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014fe:	2017      	movs	r0, #23
 8001500:	f000 fbef 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	48000c00 	.word	0x48000c00
 8001514:	48001000 	.word	0x48001000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_SPI_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d128      	bne.n	80015e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_SPI_MspInit+0x80>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_SPI_MspInit+0x80>)
 8001594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_SPI_MspInit+0x80>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_SPI_MspInit+0x80>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_SPI_MspInit+0x80>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_SPI_MspInit+0x80>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d0:	2306      	movs	r3, #6
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_SPI_MspInit+0x84>)
 80015dc:	f000 fb9c 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40003c00 	.word	0x40003c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000800 	.word	0x48000800

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 fa14 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <EXTI9_5_IRQHandler+0x14>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001652:	2040      	movs	r0, #64	; 0x40
 8001654:	f000 fd3a 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200002d0 	.word	0x200002d0

08001660 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001672:	f3af 8000 	nop.w
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
	}

return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x50>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x16>
		heap_end = &end;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <_sbrk+0x50>)
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <_sbrk+0x54>)
 80016b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <_sbrk+0x50>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <_sbrk+0x50>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	466a      	mov	r2, sp
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d907      	bls.n	80016d6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80016c6:	f002 fc1f 	bl	8003f08 <__errno>
 80016ca:	4603      	mov	r3, r0
 80016cc:	220c      	movs	r2, #12
 80016ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	e006      	b.n	80016e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <_sbrk+0x50>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a03      	ldr	r2, [pc, #12]	; (80016ec <_sbrk+0x50>)
 80016e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000338 	.word	0x20000338
 80016f0:	20000490 	.word	0x20000490

080016f4 <_close>:

int _close(int file)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171c:	605a      	str	r2, [r3, #4]
	return 0;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_isatty>:

int _isatty(int file)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
	return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <SystemInit+0x64>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <SystemInit+0x64>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <SystemInit+0x68>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <SystemInit+0x68>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <SystemInit+0x68>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <SystemInit+0x68>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <SystemInit+0x68>)
 8001788:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800178c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <SystemInit+0x68>)
 8001794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001798:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <SystemInit+0x68>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <SystemInit+0x68>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <SystemInit+0x68>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SystemInit+0x64>)
 80017ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b2:	609a      	str	r2, [r3, #8]
#endif
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00
 80017c4:	40021000 	.word	0x40021000

080017c8 <__NVIC_EnableIRQ>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  // TODO implement this

	// 1 Stop timer, clear out timer state, reset all counters
//TIM2_BASE

	switch( (uint32_t) timer){
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <timer_init+0xc8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d025      	beq.n	80018b4 <timer_init+0x5c>
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <timer_init+0xc8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d853      	bhi.n	8001916 <timer_init+0xbe>
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001872:	d003      	beq.n	800187c <timer_init+0x24>
 8001874:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <timer_init+0xcc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00e      	beq.n	8001898 <timer_init+0x40>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM5EN;
		NVIC_EnableIRQ(TIM5_IRQn);
		NVIC_SetPriority(TIM5_IRQn, 5);
		break; // Maybe priority is different?
	default:
		return;
 800187a:	e04c      	b.n	8001916 <timer_init+0xbe>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <timer_init+0xd0>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a29      	ldr	r2, [pc, #164]	; (8001928 <timer_init+0xd0>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
		NVIC_EnableIRQ(TIM2_IRQn);
 8001888:	201c      	movs	r0, #28
 800188a:	f7ff ff9d 	bl	80017c8 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM2_IRQn, 1); // Maybe priority is different?
 800188e:	2101      	movs	r1, #1
 8001890:	201c      	movs	r0, #28
 8001892:	f7ff ffb7 	bl	8001804 <__NVIC_SetPriority>
		break;
 8001896:	e01b      	b.n	80018d0 <timer_init+0x78>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <timer_init+0xd0>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <timer_init+0xd0>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
		NVIC_EnableIRQ(TIM3_IRQn);
 80018a4:	201d      	movs	r0, #29
 80018a6:	f7ff ff8f 	bl	80017c8 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM3_IRQn, 0); // Maybe priority is different?
 80018aa:	2100      	movs	r1, #0
 80018ac:	201d      	movs	r0, #29
 80018ae:	f7ff ffa9 	bl	8001804 <__NVIC_SetPriority>
		break;
 80018b2:	e00d      	b.n	80018d0 <timer_init+0x78>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM5EN;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <timer_init+0xd0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <timer_init+0xd0>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6593      	str	r3, [r2, #88]	; 0x58
		NVIC_EnableIRQ(TIM5_IRQn);
 80018c0:	2032      	movs	r0, #50	; 0x32
 80018c2:	f7ff ff81 	bl	80017c8 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM5_IRQn, 5);
 80018c6:	2105      	movs	r1, #5
 80018c8:	2032      	movs	r0, #50	; 0x32
 80018ca:	f7ff ff9b 	bl	8001804 <__NVIC_SetPriority>
		break; // Maybe priority is different?
 80018ce:	bf00      	nop
	}


	// Stop Counter + Reset state
	timer->CR1 = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	// Reset counter
	timer->CNT = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

	// Auto Reload at uint32 max
	timer->ARR = 0xFFFFFFFF;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Divide by PSC +1
	timer->PSC = 7;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2207      	movs	r2, #7
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28

	timer->EGR |= TIM_EGR_UG;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]
	timer->SR = 0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]




	// Internal Update Interrupt Enable
	timer->DIER |= TIM_DIER_UIE_Msk;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
	// Enable timer
	timer->CR1 |= TIM_CR1_CEN_Msk;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e000      	b.n	8001918 <timer_init+0xc0>
		return;
 8001916:	bf00      	nop

}
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40000c00 	.word	0x40000c00
 8001924:	40000400 	.word	0x40000400
 8001928:	40021000 	.word	0x40021000

0800192c <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  // TODO implement this
	timer->CNT = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
	// Current clock rate = 1MHz
	// Period = 1 us
	// Convert to ms by waiting 1000 clock cycles

	// Times 2 because of System clock config for BLE
	timer->ARR = 1000 * period_ms;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff fef2 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f002 fab9 	bl	8003f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fbbb 	bl	800111c <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80019b4:	080049bc 	.word	0x080049bc
  ldr r2, =_sbss
 80019b8:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80019bc:	2000048c 	.word	0x2000048c

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>

080019c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f961 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 f80e 	bl	80019f4 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e001      	b.n	80019e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e4:	f7ff fd9e 	bl	8001524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d023      	beq.n	8001a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_InitTick+0x70>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f96d 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d809      	bhi.n	8001a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f937 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_InitTick+0x74>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e004      	b.n	8001a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e001      	b.n	8001a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000134 	.word	0x20000134
 8001a64:	2000012c 	.word	0x2000012c
 8001a68:	20000130 	.word	0x20000130

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000134 	.word	0x20000134
 8001a90:	2000033c 	.word	0x2000033c

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000033c 	.word	0x2000033c

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000134 	.word	0x20000134

08001af4 <__NVIC_SetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e17f      	b.n	8002028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8171 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d118      	bne.n	8001df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ac 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_GPIO_Init+0x350>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f ae78 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	48000c00 	.word	0x48000c00
 800205c:	48001000 	.word	0x48001000
 8002060:	48001400 	.word	0x48001400
 8002064:	48001800 	.word	0x48001800
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f806 	bl	80020fc <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_PWREx_GetVoltageRange+0x18>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213e:	d130      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d038      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2232      	movs	r2, #50	; 0x32
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002174:	e002      	b.n	800217c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002188:	d102      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x60>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f2      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d110      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d007      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000
 80021d4:	2000012c 	.word	0x2000012c
 80021d8:	431bde83 	.word	0x431bde83

080021dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3ca      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b97      	ldr	r3, [pc, #604]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b94      	ldr	r3, [pc, #592]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80e4 	beq.w	80023d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	f040 808b 	bne.w	8002334 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 8087 	bne.w	8002334 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x62>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e3a2      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b82      	ldr	r3, [pc, #520]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <HAL_RCC_OscConfig+0x7c>
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002256:	e005      	b.n	8002264 <HAL_RCC_OscConfig+0x88>
 8002258:	4b7c      	ldr	r3, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	4293      	cmp	r3, r2
 8002266:	d223      	bcs.n	80022b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fd1d 	bl	8002cac <RCC_SetFlashLatencyFromMSIRange>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e383      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b73      	ldr	r3, [pc, #460]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a72      	ldr	r2, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	496d      	ldr	r1, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229a:	4b6c      	ldr	r3, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	4968      	ldr	r1, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
 80022ae:	e025      	b.n	80022fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a65      	ldr	r2, [pc, #404]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022b6:	f043 0308 	orr.w	r3, r3, #8
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4960      	ldr	r1, [pc, #384]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	495b      	ldr	r1, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fcdd 	bl	8002cac <RCC_SetFlashLatencyFromMSIRange>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e343      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 fc4a 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b52      	ldr	r3, [pc, #328]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	4950      	ldr	r1, [pc, #320]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_RCC_OscConfig+0x278>)
 800231a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800231c:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <HAL_RCC_OscConfig+0x27c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fb67 	bl	80019f4 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d052      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	e327      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d032      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7ff fba4 	bl	8001a94 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7ff fba0 	bl	8001a94 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e310      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4931      	ldr	r1, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e01a      	b.n	80023d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fb71 	bl	8001a94 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7ff fb6d 	bl	8001a94 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e2dd      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x1da>
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d074      	beq.n	80024ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x21a>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d10e      	bne.n	800240e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d10b      	bne.n	800240e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d064      	beq.n	80024cc <HAL_RCC_OscConfig+0x2f0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d160      	bne.n	80024cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e2ba      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x24a>
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e026      	b.n	8002474 <HAL_RCC_OscConfig+0x298>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242e:	d115      	bne.n	800245c <HAL_RCC_OscConfig+0x280>
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a02      	ldr	r2, [pc, #8]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x298>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	08004940 	.word	0x08004940
 8002454:	2000012c 	.word	0x2000012c
 8002458:	20000130 	.word	0x20000130
 800245c:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a9f      	ldr	r2, [pc, #636]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a9c      	ldr	r2, [pc, #624]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fb0a 	bl	8001a94 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fb06 	bl	8001a94 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e276      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x2a8>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff faf6 	bl	8001a94 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff faf2 	bl	8001a94 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e262      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x2d0>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x310>
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d119      	bne.n	800251a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d116      	bne.n	800251a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ec:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x328>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e23f      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4973      	ldr	r1, [pc, #460]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	e040      	b.n	800259c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002522:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff fab1 	bl	8001a94 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7ff faad 	bl	8001a94 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e21d      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	495f      	ldr	r1, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e018      	b.n	800259c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7ff fa8d 	bl	8001a94 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7ff fa89 	bl	8001a94 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1f9      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03c      	beq.n	8002622 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7ff fa68 	bl	8001a94 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7ff fa64 	bl	8001a94 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1d4      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3ec>
 80025e8:	e01b      	b.n	8002622 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f0:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff fa4b 	bl	8001a94 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff fa47 	bl	8001a94 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1b7      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002614:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ef      	bne.n	8002602 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a6 	beq.w	800277c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10d      	bne.n	800265c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002658:	2301      	movs	r3, #1
 800265a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x508>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d118      	bne.n	800269a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_OscConfig+0x508>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_RCC_OscConfig+0x508>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002674:	f7ff fa0e 	bl	8001a94 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7ff fa0a 	bl	8001a94 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e17a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x508>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4d8>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b2:	e029      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d115      	bne.n	80026e8 <HAL_RCC_OscConfig+0x50c>
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	4b9c      	ldr	r3, [pc, #624]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a9b      	ldr	r2, [pc, #620]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	4b98      	ldr	r3, [pc, #608]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a97      	ldr	r2, [pc, #604]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7ff f9c0 	bl	8001a94 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7ff f9bc 	bl	8001a94 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e12a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ed      	beq.n	8002718 <HAL_RCC_OscConfig+0x53c>
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff f9a9 	bl	8001a94 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff f9a5 	bl	8001a94 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e113      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275c:	4b7f      	ldr	r3, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ed      	bne.n	8002746 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80fe 	beq.w	8002982 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b02      	cmp	r3, #2
 800278c:	f040 80d0 	bne.w	8002930 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002790:	4b72      	ldr	r3, [pc, #456]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d130      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	3b01      	subs	r3, #1
 80027b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d127      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11f      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027d0:	2a07      	cmp	r2, #7
 80027d2:	bf14      	ite	ne
 80027d4:	2201      	movne	r2, #1
 80027d6:	2200      	moveq	r2, #0
 80027d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	4293      	cmp	r3, r2
 80027dc:	d113      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d06e      	beq.n	80028e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d069      	beq.n	80028e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800280c:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ad      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002834:	f7ff f92e 	bl	8001a94 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff f92a 	bl	8001a94 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e09a      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284e:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	4b40      	ldr	r3, [pc, #256]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x784>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800286a:	3a01      	subs	r2, #1
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002874:	0212      	lsls	r2, r2, #8
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800287c:	0852      	lsrs	r2, r2, #1
 800287e:	3a01      	subs	r2, #1
 8002880:	0552      	lsls	r2, r2, #21
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	3a01      	subs	r2, #1
 800288c:	0652      	lsls	r2, r2, #25
 800288e:	4311      	orrs	r1, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002894:	0912      	lsrs	r2, r2, #4
 8002896:	0452      	lsls	r2, r2, #17
 8002898:	430a      	orrs	r2, r1
 800289a:	4930      	ldr	r1, [pc, #192]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028b8:	f7ff f8ec 	bl	8001a94 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff f8e8 	bl	8001a94 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e058      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028de:	e050      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04f      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d148      	bne.n	8002982 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x780>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002908:	f7ff f8c4 	bl	8001a94 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff f8c0 	bl	8001a94 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e030      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x734>
 800292e:	e028      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x780>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <HAL_RCC_OscConfig+0x780>)
 800293c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7ff f8a7 	bl	8001a94 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	e00c      	b.n	8002964 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff f8a3 	bl	8001a94 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d905      	bls.n	8002964 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e013      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
 800295c:	40021000 	.word	0x40021000
 8002960:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ec      	bne.n	800294a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4905      	ldr	r1, [pc, #20]	; (800298c <HAL_RCC_OscConfig+0x7b0>)
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_OscConfig+0x7b4>)
 8002978:	4013      	ands	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e001      	b.n	8002982 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	feeefffc 	.word	0xfeeefffc

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0e7      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b75      	ldr	r3, [pc, #468]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	4970      	ldr	r1, [pc, #448]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b6e      	ldr	r3, [pc, #440]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cf      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4960      	ldr	r1, [pc, #384]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04c      	beq.n	8002aac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0a6      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e09a      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08e      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e086      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4943      	ldr	r1, [pc, #268]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7ff f80a 	bl	8001a94 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7ff f806 	bl	8001a94 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e06e      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d010      	beq.n	8002ada <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d208      	bcs.n	8002ada <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	492b      	ldr	r1, [pc, #172]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d210      	bcs.n	8002b0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 0207 	bic.w	r2, r3, #7
 8002af0:	4923      	ldr	r1, [pc, #140]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e036      	b.n	8002b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4918      	ldr	r1, [pc, #96]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4910      	ldr	r1, [pc, #64]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b48:	f000 f824 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1f4>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1f8>)
 8002b66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1fc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe ff41 	bl	80019f4 <HAL_InitTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b76:	7afb      	ldrb	r3, [r7, #11]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08004940 	.word	0x08004940
 8002b8c:	2000012c 	.word	0x2000012c
 8002b90:	20000130 	.word	0x20000130

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11e      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e005      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e004      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d134      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d003      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xac>
 8002c38:	e005      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3c:	617b      	str	r3, [r7, #20]
      break;
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	617b      	str	r3, [r7, #20]
      break;
 8002c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	3301      	adds	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	0e5b      	lsrs	r3, r3, #25
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08004950 	.word	0x08004950
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cc4:	f7ff fa26 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002cc8:	6178      	str	r0, [r7, #20]
 8002cca:	e014      	b.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ce4:	f7ff fa16 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d10b      	bne.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d919      	bls.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2ba0      	cmp	r3, #160	; 0xa0
 8002d08:	d902      	bls.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e013      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d10:	2301      	movs	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	e010      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d902      	bls.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	e00a      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d102      	bne.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d28:	2302      	movs	r3, #2
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e004      	b.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d101      	bne.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d34:	2301      	movs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 0207 	bic.w	r2, r3, #7
 8002d40:	4909      	ldr	r1, [pc, #36]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e095      	b.n	8002eaa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d009      	beq.n	8002da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fbd4 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002de4:	d902      	bls.n	8002dec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e002      	b.n	8002df2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_Init+0xa0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	ea42 0103 	orr.w	r1, r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	f003 0204 	and.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b088      	sub	sp, #32
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_SPI_Transmit+0x22>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e15f      	b.n	8003194 <HAL_SPI_Transmit+0x2e2>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002edc:	f7fe fdda 	bl	8001a94 <HAL_GetTick>
 8002ee0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ef6:	e148      	b.n	800318a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_SPI_Transmit+0x52>
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f08:	e13f      	b.n	800318a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f54:	d10f      	bne.n	8002f76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d007      	beq.n	8002f94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9c:	d94f      	bls.n	800303e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_Transmit+0xfa>
 8002fa6:	8afb      	ldrh	r3, [r7, #22]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d142      	bne.n	8003032 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fd0:	e02f      	b.n	8003032 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d112      	bne.n	8003006 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003004:	e015      	b.n	8003032 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003006:	f7fe fd45 	bl	8001a94 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d803      	bhi.n	800301e <HAL_SPI_Transmit+0x16c>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d102      	bne.n	8003024 <HAL_SPI_Transmit+0x172>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003030:	e0ab      	b.n	800318a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ca      	bne.n	8002fd2 <HAL_SPI_Transmit+0x120>
 800303c:	e080      	b.n	8003140 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_SPI_Transmit+0x19a>
 8003046:	8afb      	ldrh	r3, [r7, #22]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d174      	bne.n	8003136 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d912      	bls.n	800307c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b02      	subs	r3, #2
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800307a:	e05c      	b.n	8003136 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030a2:	e048      	b.n	8003136 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d12b      	bne.n	800310a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d912      	bls.n	80030e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b02      	subs	r3, #2
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030e0:	e029      	b.n	8003136 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003108:	e015      	b.n	8003136 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800310a:	f7fe fcc3 	bl	8001a94 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d803      	bhi.n	8003122 <HAL_SPI_Transmit+0x270>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d102      	bne.n	8003128 <HAL_SPI_Transmit+0x276>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003134:	e029      	b.n	800318a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1b1      	bne.n	80030a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fb69 	bl	800381c <SPI_EndRxTxTransaction>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e003      	b.n	800318a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003192:	7ffb      	ldrb	r3, [r7, #31]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031aa:	2301      	movs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0x26>
 80031be:	2302      	movs	r3, #2
 80031c0:	e20a      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x43c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ca:	f7fe fc63 	bl	8001a94 <HAL_GetTick>
 80031ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031e6:	7efb      	ldrb	r3, [r7, #27]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d00e      	beq.n	800320a <HAL_SPI_TransmitReceive+0x6e>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f2:	d106      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x66>
 80031fc:	7efb      	ldrb	r3, [r7, #27]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d003      	beq.n	800320a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003208:	e1e0      	b.n	80035cc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_SPI_TransmitReceive+0x80>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_TransmitReceive+0x80>
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003222:	e1d3      	b.n	80035cc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b04      	cmp	r3, #4
 800322e:	d003      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	887a      	ldrh	r2, [r7, #2]
 800325e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800327a:	d802      	bhi.n	8003282 <HAL_SPI_TransmitReceive+0xe6>
 800327c:	8a3b      	ldrh	r3, [r7, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d908      	bls.n	8003294 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e007      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d007      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ca:	f240 8081 	bls.w	80033d0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x140>
 80032d6:	8a7b      	ldrh	r3, [r7, #18]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d16d      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	1c9a      	adds	r2, r3, #2
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003300:	e05a      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d11b      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x1ac>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x1ac>
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b01      	cmp	r3, #1
 800331e:	d113      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d11c      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x1f4>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	b292      	uxth	r2, r2
 800336e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800338c:	2301      	movs	r3, #1
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003390:	f7fe fb80 	bl	8001a94 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339c:	429a      	cmp	r2, r3
 800339e:	d80b      	bhi.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d007      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80033b6:	e109      	b.n	80035cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d19f      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x166>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d199      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x166>
 80033ce:	e0e3      	b.n	8003598 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x244>
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	f040 80cf 	bne.w	800357e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d912      	bls.n	8003410 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	881a      	ldrh	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b02      	subs	r3, #2
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800340e:	e0b6      	b.n	800357e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003436:	e0a2      	b.n	800357e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d134      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x314>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02f      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x314>
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12c      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d912      	bls.n	8003486 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b02      	subs	r3, #2
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003484:	e012      	b.n	80034ac <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d148      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x3b4>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d042      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d923      	bls.n	800351e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	b292      	uxth	r2, r2
 80034e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b02      	subs	r3, #2
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d81f      	bhi.n	800354c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e016      	b.n	800354c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f103 020c 	add.w	r2, r3, #12
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800354c:	2301      	movs	r3, #1
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003550:	f7fe faa0 	bl	8001a94 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355c:	429a      	cmp	r2, r3
 800355e:	d803      	bhi.n	8003568 <HAL_SPI_TransmitReceive+0x3cc>
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d102      	bne.n	800356e <HAL_SPI_TransmitReceive+0x3d2>
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800357c:	e026      	b.n	80035cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af57 	bne.w	8003438 <HAL_SPI_TransmitReceive+0x29c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f47f af50 	bne.w	8003438 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f93d 	bl	800381c <SPI_EndRxTxTransaction>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e003      	b.n	80035cc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fe fa50 	bl	8001a94 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fe fa48 	bl	8001a94 <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e054      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d050      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fe fa38 	bl	8001a94 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e017      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d19b      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000012c 	.word	0x2000012c

080036f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003702:	f7fe f9c7 	bl	8001a94 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003712:	f7fe f9bf 	bl	8001a94 <HAL_GetTick>
 8003716:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003720:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00da      	lsls	r2, r3, #3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	0d1b      	lsrs	r3, r3, #20
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003738:	e060      	b.n	80037fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003740:	d107      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003750:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d050      	beq.n	80037fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800375a:	f7fe f99b 	bl	8001a94 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	429a      	cmp	r2, r3
 8003768:	d902      	bls.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x80>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13d      	bne.n	80037ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800377e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d111      	bne.n	80037ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d004      	beq.n	800379e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d107      	bne.n	80037ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d10f      	bne.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e010      	b.n	800380e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d196      	bne.n	800373a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000012c 	.word	0x2000012c

0800381c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff ff5b 	bl	80036f0 <SPI_WaitFifoStateUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e027      	b.n	80038a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2200      	movs	r2, #0
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fec0 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e014      	b.n	80038a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff34 	bl	80036f0 <SPI_WaitFifoStateUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e000      	b.n	80038a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <malloc>:
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <malloc+0xc>)
 80038aa:	4601      	mov	r1, r0
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f000 b82b 	b.w	8003908 <_malloc_r>
 80038b2:	bf00      	nop
 80038b4:	20000190 	.word	0x20000190

080038b8 <free>:
 80038b8:	4b02      	ldr	r3, [pc, #8]	; (80038c4 <free+0xc>)
 80038ba:	4601      	mov	r1, r0
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f000 bb5f 	b.w	8003f80 <_free_r>
 80038c2:	bf00      	nop
 80038c4:	20000190 	.word	0x20000190

080038c8 <sbrk_aligned>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4e0e      	ldr	r6, [pc, #56]	; (8003904 <sbrk_aligned+0x3c>)
 80038cc:	460c      	mov	r4, r1
 80038ce:	6831      	ldr	r1, [r6, #0]
 80038d0:	4605      	mov	r5, r0
 80038d2:	b911      	cbnz	r1, 80038da <sbrk_aligned+0x12>
 80038d4:	f000 faf6 	bl	8003ec4 <_sbrk_r>
 80038d8:	6030      	str	r0, [r6, #0]
 80038da:	4621      	mov	r1, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 faf1 	bl	8003ec4 <_sbrk_r>
 80038e2:	1c43      	adds	r3, r0, #1
 80038e4:	d00a      	beq.n	80038fc <sbrk_aligned+0x34>
 80038e6:	1cc4      	adds	r4, r0, #3
 80038e8:	f024 0403 	bic.w	r4, r4, #3
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d007      	beq.n	8003900 <sbrk_aligned+0x38>
 80038f0:	1a21      	subs	r1, r4, r0
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 fae6 	bl	8003ec4 <_sbrk_r>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d101      	bne.n	8003900 <sbrk_aligned+0x38>
 80038fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003900:	4620      	mov	r0, r4
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	20000344 	.word	0x20000344

08003908 <_malloc_r>:
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	1ccd      	adds	r5, r1, #3
 800390e:	f025 0503 	bic.w	r5, r5, #3
 8003912:	3508      	adds	r5, #8
 8003914:	2d0c      	cmp	r5, #12
 8003916:	bf38      	it	cc
 8003918:	250c      	movcc	r5, #12
 800391a:	2d00      	cmp	r5, #0
 800391c:	4607      	mov	r7, r0
 800391e:	db01      	blt.n	8003924 <_malloc_r+0x1c>
 8003920:	42a9      	cmp	r1, r5
 8003922:	d905      	bls.n	8003930 <_malloc_r+0x28>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	2600      	movs	r6, #0
 800392a:	4630      	mov	r0, r6
 800392c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a04 <_malloc_r+0xfc>
 8003934:	f000 f868 	bl	8003a08 <__malloc_lock>
 8003938:	f8d8 3000 	ldr.w	r3, [r8]
 800393c:	461c      	mov	r4, r3
 800393e:	bb5c      	cbnz	r4, 8003998 <_malloc_r+0x90>
 8003940:	4629      	mov	r1, r5
 8003942:	4638      	mov	r0, r7
 8003944:	f7ff ffc0 	bl	80038c8 <sbrk_aligned>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	4604      	mov	r4, r0
 800394c:	d155      	bne.n	80039fa <_malloc_r+0xf2>
 800394e:	f8d8 4000 	ldr.w	r4, [r8]
 8003952:	4626      	mov	r6, r4
 8003954:	2e00      	cmp	r6, #0
 8003956:	d145      	bne.n	80039e4 <_malloc_r+0xdc>
 8003958:	2c00      	cmp	r4, #0
 800395a:	d048      	beq.n	80039ee <_malloc_r+0xe6>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	4631      	mov	r1, r6
 8003960:	4638      	mov	r0, r7
 8003962:	eb04 0903 	add.w	r9, r4, r3
 8003966:	f000 faad 	bl	8003ec4 <_sbrk_r>
 800396a:	4581      	cmp	r9, r0
 800396c:	d13f      	bne.n	80039ee <_malloc_r+0xe6>
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	1a6d      	subs	r5, r5, r1
 8003972:	4629      	mov	r1, r5
 8003974:	4638      	mov	r0, r7
 8003976:	f7ff ffa7 	bl	80038c8 <sbrk_aligned>
 800397a:	3001      	adds	r0, #1
 800397c:	d037      	beq.n	80039ee <_malloc_r+0xe6>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	442b      	add	r3, r5
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	f8d8 3000 	ldr.w	r3, [r8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d038      	beq.n	80039fe <_malloc_r+0xf6>
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	42a2      	cmp	r2, r4
 8003990:	d12b      	bne.n	80039ea <_malloc_r+0xe2>
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e00f      	b.n	80039b8 <_malloc_r+0xb0>
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	1b52      	subs	r2, r2, r5
 800399c:	d41f      	bmi.n	80039de <_malloc_r+0xd6>
 800399e:	2a0b      	cmp	r2, #11
 80039a0:	d917      	bls.n	80039d2 <_malloc_r+0xca>
 80039a2:	1961      	adds	r1, r4, r5
 80039a4:	42a3      	cmp	r3, r4
 80039a6:	6025      	str	r5, [r4, #0]
 80039a8:	bf18      	it	ne
 80039aa:	6059      	strne	r1, [r3, #4]
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	bf08      	it	eq
 80039b0:	f8c8 1000 	streq.w	r1, [r8]
 80039b4:	5162      	str	r2, [r4, r5]
 80039b6:	604b      	str	r3, [r1, #4]
 80039b8:	4638      	mov	r0, r7
 80039ba:	f104 060b 	add.w	r6, r4, #11
 80039be:	f000 f829 	bl	8003a14 <__malloc_unlock>
 80039c2:	f026 0607 	bic.w	r6, r6, #7
 80039c6:	1d23      	adds	r3, r4, #4
 80039c8:	1af2      	subs	r2, r6, r3
 80039ca:	d0ae      	beq.n	800392a <_malloc_r+0x22>
 80039cc:	1b9b      	subs	r3, r3, r6
 80039ce:	50a3      	str	r3, [r4, r2]
 80039d0:	e7ab      	b.n	800392a <_malloc_r+0x22>
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	6862      	ldr	r2, [r4, #4]
 80039d6:	d1dd      	bne.n	8003994 <_malloc_r+0x8c>
 80039d8:	f8c8 2000 	str.w	r2, [r8]
 80039dc:	e7ec      	b.n	80039b8 <_malloc_r+0xb0>
 80039de:	4623      	mov	r3, r4
 80039e0:	6864      	ldr	r4, [r4, #4]
 80039e2:	e7ac      	b.n	800393e <_malloc_r+0x36>
 80039e4:	4634      	mov	r4, r6
 80039e6:	6876      	ldr	r6, [r6, #4]
 80039e8:	e7b4      	b.n	8003954 <_malloc_r+0x4c>
 80039ea:	4613      	mov	r3, r2
 80039ec:	e7cc      	b.n	8003988 <_malloc_r+0x80>
 80039ee:	230c      	movs	r3, #12
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4638      	mov	r0, r7
 80039f4:	f000 f80e 	bl	8003a14 <__malloc_unlock>
 80039f8:	e797      	b.n	800392a <_malloc_r+0x22>
 80039fa:	6025      	str	r5, [r4, #0]
 80039fc:	e7dc      	b.n	80039b8 <_malloc_r+0xb0>
 80039fe:	605b      	str	r3, [r3, #4]
 8003a00:	deff      	udf	#255	; 0xff
 8003a02:	bf00      	nop
 8003a04:	20000340 	.word	0x20000340

08003a08 <__malloc_lock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_lock+0x8>)
 8003a0a:	f000 baa8 	b.w	8003f5e <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	20000488 	.word	0x20000488

08003a14 <__malloc_unlock>:
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <__malloc_unlock+0x8>)
 8003a16:	f000 baa3 	b.w	8003f60 <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	20000488 	.word	0x20000488

08003a20 <std>:
 8003a20:	2300      	movs	r3, #0
 8003a22:	b510      	push	{r4, lr}
 8003a24:	4604      	mov	r4, r0
 8003a26:	e9c0 3300 	strd	r3, r3, [r0]
 8003a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a2e:	6083      	str	r3, [r0, #8]
 8003a30:	8181      	strh	r1, [r0, #12]
 8003a32:	6643      	str	r3, [r0, #100]	; 0x64
 8003a34:	81c2      	strh	r2, [r0, #14]
 8003a36:	6183      	str	r3, [r0, #24]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	305c      	adds	r0, #92	; 0x5c
 8003a3e:	f000 fa05 	bl	8003e4c <memset>
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <std+0x58>)
 8003a44:	6263      	str	r3, [r4, #36]	; 0x24
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <std+0x5c>)
 8003a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <std+0x60>)
 8003a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <std+0x64>)
 8003a50:	6323      	str	r3, [r4, #48]	; 0x30
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <std+0x68>)
 8003a54:	6224      	str	r4, [r4, #32]
 8003a56:	429c      	cmp	r4, r3
 8003a58:	d006      	beq.n	8003a68 <std+0x48>
 8003a5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003a5e:	4294      	cmp	r4, r2
 8003a60:	d002      	beq.n	8003a68 <std+0x48>
 8003a62:	33d0      	adds	r3, #208	; 0xd0
 8003a64:	429c      	cmp	r4, r3
 8003a66:	d105      	bne.n	8003a74 <std+0x54>
 8003a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a70:	f000 ba74 	b.w	8003f5c <__retarget_lock_init_recursive>
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop
 8003a78:	08003c9d 	.word	0x08003c9d
 8003a7c:	08003cbf 	.word	0x08003cbf
 8003a80:	08003cf7 	.word	0x08003cf7
 8003a84:	08003d1b 	.word	0x08003d1b
 8003a88:	20000348 	.word	0x20000348

08003a8c <stdio_exit_handler>:
 8003a8c:	4a02      	ldr	r2, [pc, #8]	; (8003a98 <stdio_exit_handler+0xc>)
 8003a8e:	4903      	ldr	r1, [pc, #12]	; (8003a9c <stdio_exit_handler+0x10>)
 8003a90:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <stdio_exit_handler+0x14>)
 8003a92:	f000 b869 	b.w	8003b68 <_fwalk_sglue>
 8003a96:	bf00      	nop
 8003a98:	20000138 	.word	0x20000138
 8003a9c:	080046f5 	.word	0x080046f5
 8003aa0:	20000144 	.word	0x20000144

08003aa4 <cleanup_stdio>:
 8003aa4:	6841      	ldr	r1, [r0, #4]
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <cleanup_stdio+0x34>)
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	4604      	mov	r4, r0
 8003aae:	d001      	beq.n	8003ab4 <cleanup_stdio+0x10>
 8003ab0:	f000 fe20 	bl	80046f4 <_fflush_r>
 8003ab4:	68a1      	ldr	r1, [r4, #8]
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <cleanup_stdio+0x38>)
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	d002      	beq.n	8003ac2 <cleanup_stdio+0x1e>
 8003abc:	4620      	mov	r0, r4
 8003abe:	f000 fe19 	bl	80046f4 <_fflush_r>
 8003ac2:	68e1      	ldr	r1, [r4, #12]
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <cleanup_stdio+0x3c>)
 8003ac6:	4299      	cmp	r1, r3
 8003ac8:	d004      	beq.n	8003ad4 <cleanup_stdio+0x30>
 8003aca:	4620      	mov	r0, r4
 8003acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad0:	f000 be10 	b.w	80046f4 <_fflush_r>
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000348 	.word	0x20000348
 8003adc:	200003b0 	.word	0x200003b0
 8003ae0:	20000418 	.word	0x20000418

08003ae4 <global_stdio_init.part.0>:
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <global_stdio_init.part.0+0x30>)
 8003ae8:	4c0b      	ldr	r4, [pc, #44]	; (8003b18 <global_stdio_init.part.0+0x34>)
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <global_stdio_init.part.0+0x38>)
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	4620      	mov	r0, r4
 8003af0:	2200      	movs	r2, #0
 8003af2:	2104      	movs	r1, #4
 8003af4:	f7ff ff94 	bl	8003a20 <std>
 8003af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003afc:	2201      	movs	r2, #1
 8003afe:	2109      	movs	r1, #9
 8003b00:	f7ff ff8e 	bl	8003a20 <std>
 8003b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b08:	2202      	movs	r2, #2
 8003b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b0e:	2112      	movs	r1, #18
 8003b10:	f7ff bf86 	b.w	8003a20 <std>
 8003b14:	20000480 	.word	0x20000480
 8003b18:	20000348 	.word	0x20000348
 8003b1c:	08003a8d 	.word	0x08003a8d

08003b20 <__sfp_lock_acquire>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__sfp_lock_acquire+0x8>)
 8003b22:	f000 ba1c 	b.w	8003f5e <__retarget_lock_acquire_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000489 	.word	0x20000489

08003b2c <__sfp_lock_release>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__sfp_lock_release+0x8>)
 8003b2e:	f000 ba17 	b.w	8003f60 <__retarget_lock_release_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000489 	.word	0x20000489

08003b38 <__sinit>:
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	f7ff fff0 	bl	8003b20 <__sfp_lock_acquire>
 8003b40:	6a23      	ldr	r3, [r4, #32]
 8003b42:	b11b      	cbz	r3, 8003b4c <__sinit+0x14>
 8003b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b48:	f7ff bff0 	b.w	8003b2c <__sfp_lock_release>
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <__sinit+0x28>)
 8003b4e:	6223      	str	r3, [r4, #32]
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__sinit+0x2c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f5      	bne.n	8003b44 <__sinit+0xc>
 8003b58:	f7ff ffc4 	bl	8003ae4 <global_stdio_init.part.0>
 8003b5c:	e7f2      	b.n	8003b44 <__sinit+0xc>
 8003b5e:	bf00      	nop
 8003b60:	08003aa5 	.word	0x08003aa5
 8003b64:	20000480 	.word	0x20000480

08003b68 <_fwalk_sglue>:
 8003b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4688      	mov	r8, r1
 8003b70:	4614      	mov	r4, r2
 8003b72:	2600      	movs	r6, #0
 8003b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b78:	f1b9 0901 	subs.w	r9, r9, #1
 8003b7c:	d505      	bpl.n	8003b8a <_fwalk_sglue+0x22>
 8003b7e:	6824      	ldr	r4, [r4, #0]
 8003b80:	2c00      	cmp	r4, #0
 8003b82:	d1f7      	bne.n	8003b74 <_fwalk_sglue+0xc>
 8003b84:	4630      	mov	r0, r6
 8003b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d907      	bls.n	8003ba0 <_fwalk_sglue+0x38>
 8003b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b94:	3301      	adds	r3, #1
 8003b96:	d003      	beq.n	8003ba0 <_fwalk_sglue+0x38>
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	47c0      	blx	r8
 8003b9e:	4306      	orrs	r6, r0
 8003ba0:	3568      	adds	r5, #104	; 0x68
 8003ba2:	e7e9      	b.n	8003b78 <_fwalk_sglue+0x10>

08003ba4 <_puts_r>:
 8003ba4:	6a03      	ldr	r3, [r0, #32]
 8003ba6:	b570      	push	{r4, r5, r6, lr}
 8003ba8:	6884      	ldr	r4, [r0, #8]
 8003baa:	4605      	mov	r5, r0
 8003bac:	460e      	mov	r6, r1
 8003bae:	b90b      	cbnz	r3, 8003bb4 <_puts_r+0x10>
 8003bb0:	f7ff ffc2 	bl	8003b38 <__sinit>
 8003bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bb6:	07db      	lsls	r3, r3, #31
 8003bb8:	d405      	bmi.n	8003bc6 <_puts_r+0x22>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	0598      	lsls	r0, r3, #22
 8003bbe:	d402      	bmi.n	8003bc6 <_puts_r+0x22>
 8003bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc2:	f000 f9cc 	bl	8003f5e <__retarget_lock_acquire_recursive>
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	0719      	lsls	r1, r3, #28
 8003bca:	d513      	bpl.n	8003bf4 <_puts_r+0x50>
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	b18b      	cbz	r3, 8003bf4 <_puts_r+0x50>
 8003bd0:	3e01      	subs	r6, #1
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60a3      	str	r3, [r4, #8]
 8003bdc:	b9e9      	cbnz	r1, 8003c1a <_puts_r+0x76>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da2e      	bge.n	8003c40 <_puts_r+0x9c>
 8003be2:	4622      	mov	r2, r4
 8003be4:	210a      	movs	r1, #10
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 f89b 	bl	8003d22 <__swbuf_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d007      	beq.n	8003c00 <_puts_r+0x5c>
 8003bf0:	250a      	movs	r5, #10
 8003bf2:	e007      	b.n	8003c04 <_puts_r+0x60>
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 f8d0 	bl	8003d9c <__swsetup_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d0e7      	beq.n	8003bd0 <_puts_r+0x2c>
 8003c00:	f04f 35ff 	mov.w	r5, #4294967295
 8003c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c06:	07da      	lsls	r2, r3, #31
 8003c08:	d405      	bmi.n	8003c16 <_puts_r+0x72>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	059b      	lsls	r3, r3, #22
 8003c0e:	d402      	bmi.n	8003c16 <_puts_r+0x72>
 8003c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c12:	f000 f9a5 	bl	8003f60 <__retarget_lock_release_recursive>
 8003c16:	4628      	mov	r0, r5
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da04      	bge.n	8003c28 <_puts_r+0x84>
 8003c1e:	69a2      	ldr	r2, [r4, #24]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	dc06      	bgt.n	8003c32 <_puts_r+0x8e>
 8003c24:	290a      	cmp	r1, #10
 8003c26:	d004      	beq.n	8003c32 <_puts_r+0x8e>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	6022      	str	r2, [r4, #0]
 8003c2e:	7019      	strb	r1, [r3, #0]
 8003c30:	e7cf      	b.n	8003bd2 <_puts_r+0x2e>
 8003c32:	4622      	mov	r2, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 f874 	bl	8003d22 <__swbuf_r>
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d1c9      	bne.n	8003bd2 <_puts_r+0x2e>
 8003c3e:	e7df      	b.n	8003c00 <_puts_r+0x5c>
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	250a      	movs	r5, #10
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	701d      	strb	r5, [r3, #0]
 8003c4a:	e7db      	b.n	8003c04 <_puts_r+0x60>

08003c4c <puts>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <puts+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f7ff bfa7 	b.w	8003ba4 <_puts_r>
 8003c56:	bf00      	nop
 8003c58:	20000190 	.word	0x20000190

08003c5c <siprintf>:
 8003c5c:	b40e      	push	{r1, r2, r3}
 8003c5e:	b500      	push	{lr}
 8003c60:	b09c      	sub	sp, #112	; 0x70
 8003c62:	ab1d      	add	r3, sp, #116	; 0x74
 8003c64:	9002      	str	r0, [sp, #8]
 8003c66:	9006      	str	r0, [sp, #24]
 8003c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c6c:	4809      	ldr	r0, [pc, #36]	; (8003c94 <siprintf+0x38>)
 8003c6e:	9107      	str	r1, [sp, #28]
 8003c70:	9104      	str	r1, [sp, #16]
 8003c72:	4909      	ldr	r1, [pc, #36]	; (8003c98 <siprintf+0x3c>)
 8003c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c78:	9105      	str	r1, [sp, #20]
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	a902      	add	r1, sp, #8
 8003c80:	f000 fa24 	bl	80040cc <_svfiprintf_r>
 8003c84:	9b02      	ldr	r3, [sp, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	b01c      	add	sp, #112	; 0x70
 8003c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c90:	b003      	add	sp, #12
 8003c92:	4770      	bx	lr
 8003c94:	20000190 	.word	0x20000190
 8003c98:	ffff0208 	.word	0xffff0208

08003c9c <__sread>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca4:	f000 f8fc 	bl	8003ea0 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bfab      	itete	ge
 8003cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cae:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb0:	181b      	addge	r3, r3, r0
 8003cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb6:	bfac      	ite	ge
 8003cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cba:	81a3      	strhlt	r3, [r4, #12]
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <__swrite>:
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	898b      	ldrh	r3, [r1, #12]
 8003cc6:	05db      	lsls	r3, r3, #23
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d505      	bpl.n	8003cdc <__swrite+0x1e>
 8003cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f000 f8d0 	bl	8003e7c <_lseek_r>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	4632      	mov	r2, r6
 8003cea:	463b      	mov	r3, r7
 8003cec:	4628      	mov	r0, r5
 8003cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	f000 b8f7 	b.w	8003ee4 <_write_r>

08003cf6 <__sseek>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 f8bd 	bl	8003e7c <_lseek_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	bf15      	itete	ne
 8003d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strheq	r3, [r4, #12]
 8003d14:	bf18      	it	ne
 8003d16:	81a3      	strhne	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__sclose>:
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 b89d 	b.w	8003e5c <_close_r>

08003d22 <__swbuf_r>:
 8003d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d24:	460e      	mov	r6, r1
 8003d26:	4614      	mov	r4, r2
 8003d28:	4605      	mov	r5, r0
 8003d2a:	b118      	cbz	r0, 8003d34 <__swbuf_r+0x12>
 8003d2c:	6a03      	ldr	r3, [r0, #32]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <__swbuf_r+0x12>
 8003d30:	f7ff ff02 	bl	8003b38 <__sinit>
 8003d34:	69a3      	ldr	r3, [r4, #24]
 8003d36:	60a3      	str	r3, [r4, #8]
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	071a      	lsls	r2, r3, #28
 8003d3c:	d525      	bpl.n	8003d8a <__swbuf_r+0x68>
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	b31b      	cbz	r3, 8003d8a <__swbuf_r+0x68>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	6922      	ldr	r2, [r4, #16]
 8003d46:	1a98      	subs	r0, r3, r2
 8003d48:	6963      	ldr	r3, [r4, #20]
 8003d4a:	b2f6      	uxtb	r6, r6
 8003d4c:	4283      	cmp	r3, r0
 8003d4e:	4637      	mov	r7, r6
 8003d50:	dc04      	bgt.n	8003d5c <__swbuf_r+0x3a>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 fccd 	bl	80046f4 <_fflush_r>
 8003d5a:	b9e0      	cbnz	r0, 8003d96 <__swbuf_r+0x74>
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60a3      	str	r3, [r4, #8]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	701e      	strb	r6, [r3, #0]
 8003d6a:	6962      	ldr	r2, [r4, #20]
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d004      	beq.n	8003d7c <__swbuf_r+0x5a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	07db      	lsls	r3, r3, #31
 8003d76:	d506      	bpl.n	8003d86 <__swbuf_r+0x64>
 8003d78:	2e0a      	cmp	r6, #10
 8003d7a:	d104      	bne.n	8003d86 <__swbuf_r+0x64>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fcb8 	bl	80046f4 <_fflush_r>
 8003d84:	b938      	cbnz	r0, 8003d96 <__swbuf_r+0x74>
 8003d86:	4638      	mov	r0, r7
 8003d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f805 	bl	8003d9c <__swsetup_r>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d0d5      	beq.n	8003d42 <__swbuf_r+0x20>
 8003d96:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9a:	e7f4      	b.n	8003d86 <__swbuf_r+0x64>

08003d9c <__swsetup_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <__swsetup_r+0xac>)
 8003da0:	4605      	mov	r5, r0
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	460c      	mov	r4, r1
 8003da6:	b118      	cbz	r0, 8003db0 <__swsetup_r+0x14>
 8003da8:	6a03      	ldr	r3, [r0, #32]
 8003daa:	b90b      	cbnz	r3, 8003db0 <__swsetup_r+0x14>
 8003dac:	f7ff fec4 	bl	8003b38 <__sinit>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db6:	0718      	lsls	r0, r3, #28
 8003db8:	d422      	bmi.n	8003e00 <__swsetup_r+0x64>
 8003dba:	06d9      	lsls	r1, r3, #27
 8003dbc:	d407      	bmi.n	8003dce <__swsetup_r+0x32>
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e034      	b.n	8003e38 <__swsetup_r+0x9c>
 8003dce:	0758      	lsls	r0, r3, #29
 8003dd0:	d512      	bpl.n	8003df8 <__swsetup_r+0x5c>
 8003dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd4:	b141      	cbz	r1, 8003de8 <__swsetup_r+0x4c>
 8003dd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	d002      	beq.n	8003de4 <__swsetup_r+0x48>
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f8ce 	bl	8003f80 <_free_r>
 8003de4:	2300      	movs	r3, #0
 8003de6:	6363      	str	r3, [r4, #52]	; 0x34
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	2300      	movs	r3, #0
 8003df2:	6063      	str	r3, [r4, #4]
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	b94b      	cbnz	r3, 8003e18 <__swsetup_r+0x7c>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0e:	d003      	beq.n	8003e18 <__swsetup_r+0x7c>
 8003e10:	4621      	mov	r1, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fcbc 	bl	8004790 <__smakebuf_r>
 8003e18:	89a0      	ldrh	r0, [r4, #12]
 8003e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e1e:	f010 0301 	ands.w	r3, r0, #1
 8003e22:	d00a      	beq.n	8003e3a <__swsetup_r+0x9e>
 8003e24:	2300      	movs	r3, #0
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6963      	ldr	r3, [r4, #20]
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	61a3      	str	r3, [r4, #24]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	b943      	cbnz	r3, 8003e44 <__swsetup_r+0xa8>
 8003e32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e36:	d1c4      	bne.n	8003dc2 <__swsetup_r+0x26>
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
 8003e3a:	0781      	lsls	r1, r0, #30
 8003e3c:	bf58      	it	pl
 8003e3e:	6963      	ldrpl	r3, [r4, #20]
 8003e40:	60a3      	str	r3, [r4, #8]
 8003e42:	e7f4      	b.n	8003e2e <__swsetup_r+0x92>
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7f7      	b.n	8003e38 <__swsetup_r+0x9c>
 8003e48:	20000190 	.word	0x20000190

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fd fc44 	bl	80016f4 <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20000484 	.word	0x20000484

08003e7c <_lseek_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	; (8003e9c <_lseek_r+0x20>)
 8003e80:	4604      	mov	r4, r0
 8003e82:	4608      	mov	r0, r1
 8003e84:	4611      	mov	r1, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	602a      	str	r2, [r5, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fd fc59 	bl	8001742 <_lseek>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_lseek_r+0x1e>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_lseek_r+0x1e>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	20000484 	.word	0x20000484

08003ea0 <_read_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	; (8003ec0 <_read_r+0x20>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fd fbd6 	bl	8001660 <_read>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_read_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_read_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	20000484 	.word	0x20000484

08003ec4 <_sbrk_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d06      	ldr	r5, [pc, #24]	; (8003ee0 <_sbrk_r+0x1c>)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f7fd fbe4 	bl	800169c <_sbrk>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_sbrk_r+0x1a>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_sbrk_r+0x1a>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	20000484 	.word	0x20000484

08003ee4 <_write_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4d07      	ldr	r5, [pc, #28]	; (8003f04 <_write_r+0x20>)
 8003ee8:	4604      	mov	r4, r0
 8003eea:	4608      	mov	r0, r1
 8003eec:	4611      	mov	r1, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fd f8f4 	bl	80010e0 <_write>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_write_r+0x1e>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_write_r+0x1e>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	20000484 	.word	0x20000484

08003f08 <__errno>:
 8003f08:	4b01      	ldr	r3, [pc, #4]	; (8003f10 <__errno+0x8>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000190 	.word	0x20000190

08003f14 <__libc_init_array>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4d0d      	ldr	r5, [pc, #52]	; (8003f4c <__libc_init_array+0x38>)
 8003f18:	4c0d      	ldr	r4, [pc, #52]	; (8003f50 <__libc_init_array+0x3c>)
 8003f1a:	1b64      	subs	r4, r4, r5
 8003f1c:	10a4      	asrs	r4, r4, #2
 8003f1e:	2600      	movs	r6, #0
 8003f20:	42a6      	cmp	r6, r4
 8003f22:	d109      	bne.n	8003f38 <__libc_init_array+0x24>
 8003f24:	4d0b      	ldr	r5, [pc, #44]	; (8003f54 <__libc_init_array+0x40>)
 8003f26:	4c0c      	ldr	r4, [pc, #48]	; (8003f58 <__libc_init_array+0x44>)
 8003f28:	f000 fce2 	bl	80048f0 <_init>
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	2600      	movs	r6, #0
 8003f32:	42a6      	cmp	r6, r4
 8003f34:	d105      	bne.n	8003f42 <__libc_init_array+0x2e>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3c:	4798      	blx	r3
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7ee      	b.n	8003f20 <__libc_init_array+0xc>
 8003f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f46:	4798      	blx	r3
 8003f48:	3601      	adds	r6, #1
 8003f4a:	e7f2      	b.n	8003f32 <__libc_init_array+0x1e>
 8003f4c:	080049b4 	.word	0x080049b4
 8003f50:	080049b4 	.word	0x080049b4
 8003f54:	080049b4 	.word	0x080049b4
 8003f58:	080049b8 	.word	0x080049b8

08003f5c <__retarget_lock_init_recursive>:
 8003f5c:	4770      	bx	lr

08003f5e <__retarget_lock_acquire_recursive>:
 8003f5e:	4770      	bx	lr

08003f60 <__retarget_lock_release_recursive>:
 8003f60:	4770      	bx	lr

08003f62 <memcpy>:
 8003f62:	440a      	add	r2, r1
 8003f64:	4291      	cmp	r1, r2
 8003f66:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f6a:	d100      	bne.n	8003f6e <memcpy+0xc>
 8003f6c:	4770      	bx	lr
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f78:	4291      	cmp	r1, r2
 8003f7a:	d1f9      	bne.n	8003f70 <memcpy+0xe>
 8003f7c:	bd10      	pop	{r4, pc}
	...

08003f80 <_free_r>:
 8003f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d044      	beq.n	8004010 <_free_r+0x90>
 8003f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8a:	9001      	str	r0, [sp, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f92:	bfb8      	it	lt
 8003f94:	18e4      	addlt	r4, r4, r3
 8003f96:	f7ff fd37 	bl	8003a08 <__malloc_lock>
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <_free_r+0x94>)
 8003f9c:	9801      	ldr	r0, [sp, #4]
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	b933      	cbnz	r3, 8003fb0 <_free_r+0x30>
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	6014      	str	r4, [r2, #0]
 8003fa6:	b003      	add	sp, #12
 8003fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fac:	f7ff bd32 	b.w	8003a14 <__malloc_unlock>
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	d908      	bls.n	8003fc6 <_free_r+0x46>
 8003fb4:	6825      	ldr	r5, [r4, #0]
 8003fb6:	1961      	adds	r1, r4, r5
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	bf01      	itttt	eq
 8003fbc:	6819      	ldreq	r1, [r3, #0]
 8003fbe:	685b      	ldreq	r3, [r3, #4]
 8003fc0:	1949      	addeq	r1, r1, r5
 8003fc2:	6021      	streq	r1, [r4, #0]
 8003fc4:	e7ed      	b.n	8003fa2 <_free_r+0x22>
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b10b      	cbz	r3, 8003fd0 <_free_r+0x50>
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d9fa      	bls.n	8003fc6 <_free_r+0x46>
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	1855      	adds	r5, r2, r1
 8003fd4:	42a5      	cmp	r5, r4
 8003fd6:	d10b      	bne.n	8003ff0 <_free_r+0x70>
 8003fd8:	6824      	ldr	r4, [r4, #0]
 8003fda:	4421      	add	r1, r4
 8003fdc:	1854      	adds	r4, r2, r1
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	d1e0      	bne.n	8003fa6 <_free_r+0x26>
 8003fe4:	681c      	ldr	r4, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	6053      	str	r3, [r2, #4]
 8003fea:	440c      	add	r4, r1
 8003fec:	6014      	str	r4, [r2, #0]
 8003fee:	e7da      	b.n	8003fa6 <_free_r+0x26>
 8003ff0:	d902      	bls.n	8003ff8 <_free_r+0x78>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	6003      	str	r3, [r0, #0]
 8003ff6:	e7d6      	b.n	8003fa6 <_free_r+0x26>
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	1961      	adds	r1, r4, r5
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	bf04      	itt	eq
 8004000:	6819      	ldreq	r1, [r3, #0]
 8004002:	685b      	ldreq	r3, [r3, #4]
 8004004:	6063      	str	r3, [r4, #4]
 8004006:	bf04      	itt	eq
 8004008:	1949      	addeq	r1, r1, r5
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	6054      	str	r4, [r2, #4]
 800400e:	e7ca      	b.n	8003fa6 <_free_r+0x26>
 8004010:	b003      	add	sp, #12
 8004012:	bd30      	pop	{r4, r5, pc}
 8004014:	20000340 	.word	0x20000340

08004018 <__ssputs_r>:
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	688e      	ldr	r6, [r1, #8]
 800401e:	461f      	mov	r7, r3
 8004020:	42be      	cmp	r6, r7
 8004022:	680b      	ldr	r3, [r1, #0]
 8004024:	4682      	mov	sl, r0
 8004026:	460c      	mov	r4, r1
 8004028:	4690      	mov	r8, r2
 800402a:	d82c      	bhi.n	8004086 <__ssputs_r+0x6e>
 800402c:	898a      	ldrh	r2, [r1, #12]
 800402e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004032:	d026      	beq.n	8004082 <__ssputs_r+0x6a>
 8004034:	6965      	ldr	r5, [r4, #20]
 8004036:	6909      	ldr	r1, [r1, #16]
 8004038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800403c:	eba3 0901 	sub.w	r9, r3, r1
 8004040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004044:	1c7b      	adds	r3, r7, #1
 8004046:	444b      	add	r3, r9
 8004048:	106d      	asrs	r5, r5, #1
 800404a:	429d      	cmp	r5, r3
 800404c:	bf38      	it	cc
 800404e:	461d      	movcc	r5, r3
 8004050:	0553      	lsls	r3, r2, #21
 8004052:	d527      	bpl.n	80040a4 <__ssputs_r+0x8c>
 8004054:	4629      	mov	r1, r5
 8004056:	f7ff fc57 	bl	8003908 <_malloc_r>
 800405a:	4606      	mov	r6, r0
 800405c:	b360      	cbz	r0, 80040b8 <__ssputs_r+0xa0>
 800405e:	6921      	ldr	r1, [r4, #16]
 8004060:	464a      	mov	r2, r9
 8004062:	f7ff ff7e 	bl	8003f62 <memcpy>
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	6126      	str	r6, [r4, #16]
 8004074:	6165      	str	r5, [r4, #20]
 8004076:	444e      	add	r6, r9
 8004078:	eba5 0509 	sub.w	r5, r5, r9
 800407c:	6026      	str	r6, [r4, #0]
 800407e:	60a5      	str	r5, [r4, #8]
 8004080:	463e      	mov	r6, r7
 8004082:	42be      	cmp	r6, r7
 8004084:	d900      	bls.n	8004088 <__ssputs_r+0x70>
 8004086:	463e      	mov	r6, r7
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	4632      	mov	r2, r6
 800408c:	4641      	mov	r1, r8
 800408e:	f000 fbbb 	bl	8004808 <memmove>
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	1b9b      	subs	r3, r3, r6
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	4433      	add	r3, r6
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	2000      	movs	r0, #0
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	462a      	mov	r2, r5
 80040a6:	f000 fbeb 	bl	8004880 <_realloc_r>
 80040aa:	4606      	mov	r6, r0
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d1e0      	bne.n	8004072 <__ssputs_r+0x5a>
 80040b0:	6921      	ldr	r1, [r4, #16]
 80040b2:	4650      	mov	r0, sl
 80040b4:	f7ff ff64 	bl	8003f80 <_free_r>
 80040b8:	230c      	movs	r3, #12
 80040ba:	f8ca 3000 	str.w	r3, [sl]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	e7e9      	b.n	80040a0 <__ssputs_r+0x88>

080040cc <_svfiprintf_r>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	4698      	mov	r8, r3
 80040d2:	898b      	ldrh	r3, [r1, #12]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	b09d      	sub	sp, #116	; 0x74
 80040d8:	4607      	mov	r7, r0
 80040da:	460d      	mov	r5, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	d50e      	bpl.n	80040fe <_svfiprintf_r+0x32>
 80040e0:	690b      	ldr	r3, [r1, #16]
 80040e2:	b963      	cbnz	r3, 80040fe <_svfiprintf_r+0x32>
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	f7ff fc0f 	bl	8003908 <_malloc_r>
 80040ea:	6028      	str	r0, [r5, #0]
 80040ec:	6128      	str	r0, [r5, #16]
 80040ee:	b920      	cbnz	r0, 80040fa <_svfiprintf_r+0x2e>
 80040f0:	230c      	movs	r3, #12
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e0d0      	b.n	800429c <_svfiprintf_r+0x1d0>
 80040fa:	2340      	movs	r3, #64	; 0x40
 80040fc:	616b      	str	r3, [r5, #20]
 80040fe:	2300      	movs	r3, #0
 8004100:	9309      	str	r3, [sp, #36]	; 0x24
 8004102:	2320      	movs	r3, #32
 8004104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004108:	f8cd 800c 	str.w	r8, [sp, #12]
 800410c:	2330      	movs	r3, #48	; 0x30
 800410e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042b4 <_svfiprintf_r+0x1e8>
 8004112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004116:	f04f 0901 	mov.w	r9, #1
 800411a:	4623      	mov	r3, r4
 800411c:	469a      	mov	sl, r3
 800411e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004122:	b10a      	cbz	r2, 8004128 <_svfiprintf_r+0x5c>
 8004124:	2a25      	cmp	r2, #37	; 0x25
 8004126:	d1f9      	bne.n	800411c <_svfiprintf_r+0x50>
 8004128:	ebba 0b04 	subs.w	fp, sl, r4
 800412c:	d00b      	beq.n	8004146 <_svfiprintf_r+0x7a>
 800412e:	465b      	mov	r3, fp
 8004130:	4622      	mov	r2, r4
 8004132:	4629      	mov	r1, r5
 8004134:	4638      	mov	r0, r7
 8004136:	f7ff ff6f 	bl	8004018 <__ssputs_r>
 800413a:	3001      	adds	r0, #1
 800413c:	f000 80a9 	beq.w	8004292 <_svfiprintf_r+0x1c6>
 8004140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004142:	445a      	add	r2, fp
 8004144:	9209      	str	r2, [sp, #36]	; 0x24
 8004146:	f89a 3000 	ldrb.w	r3, [sl]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80a1 	beq.w	8004292 <_svfiprintf_r+0x1c6>
 8004150:	2300      	movs	r3, #0
 8004152:	f04f 32ff 	mov.w	r2, #4294967295
 8004156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415a:	f10a 0a01 	add.w	sl, sl, #1
 800415e:	9304      	str	r3, [sp, #16]
 8004160:	9307      	str	r3, [sp, #28]
 8004162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004166:	931a      	str	r3, [sp, #104]	; 0x68
 8004168:	4654      	mov	r4, sl
 800416a:	2205      	movs	r2, #5
 800416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004170:	4850      	ldr	r0, [pc, #320]	; (80042b4 <_svfiprintf_r+0x1e8>)
 8004172:	f7fc f82d 	bl	80001d0 <memchr>
 8004176:	9a04      	ldr	r2, [sp, #16]
 8004178:	b9d8      	cbnz	r0, 80041b2 <_svfiprintf_r+0xe6>
 800417a:	06d0      	lsls	r0, r2, #27
 800417c:	bf44      	itt	mi
 800417e:	2320      	movmi	r3, #32
 8004180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004184:	0711      	lsls	r1, r2, #28
 8004186:	bf44      	itt	mi
 8004188:	232b      	movmi	r3, #43	; 0x2b
 800418a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800418e:	f89a 3000 	ldrb.w	r3, [sl]
 8004192:	2b2a      	cmp	r3, #42	; 0x2a
 8004194:	d015      	beq.n	80041c2 <_svfiprintf_r+0xf6>
 8004196:	9a07      	ldr	r2, [sp, #28]
 8004198:	4654      	mov	r4, sl
 800419a:	2000      	movs	r0, #0
 800419c:	f04f 0c0a 	mov.w	ip, #10
 80041a0:	4621      	mov	r1, r4
 80041a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a6:	3b30      	subs	r3, #48	; 0x30
 80041a8:	2b09      	cmp	r3, #9
 80041aa:	d94d      	bls.n	8004248 <_svfiprintf_r+0x17c>
 80041ac:	b1b0      	cbz	r0, 80041dc <_svfiprintf_r+0x110>
 80041ae:	9207      	str	r2, [sp, #28]
 80041b0:	e014      	b.n	80041dc <_svfiprintf_r+0x110>
 80041b2:	eba0 0308 	sub.w	r3, r0, r8
 80041b6:	fa09 f303 	lsl.w	r3, r9, r3
 80041ba:	4313      	orrs	r3, r2
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	46a2      	mov	sl, r4
 80041c0:	e7d2      	b.n	8004168 <_svfiprintf_r+0x9c>
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	1d19      	adds	r1, r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	9103      	str	r1, [sp, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bfbb      	ittet	lt
 80041ce:	425b      	neglt	r3, r3
 80041d0:	f042 0202 	orrlt.w	r2, r2, #2
 80041d4:	9307      	strge	r3, [sp, #28]
 80041d6:	9307      	strlt	r3, [sp, #28]
 80041d8:	bfb8      	it	lt
 80041da:	9204      	strlt	r2, [sp, #16]
 80041dc:	7823      	ldrb	r3, [r4, #0]
 80041de:	2b2e      	cmp	r3, #46	; 0x2e
 80041e0:	d10c      	bne.n	80041fc <_svfiprintf_r+0x130>
 80041e2:	7863      	ldrb	r3, [r4, #1]
 80041e4:	2b2a      	cmp	r3, #42	; 0x2a
 80041e6:	d134      	bne.n	8004252 <_svfiprintf_r+0x186>
 80041e8:	9b03      	ldr	r3, [sp, #12]
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	9203      	str	r2, [sp, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfb8      	it	lt
 80041f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041f8:	3402      	adds	r4, #2
 80041fa:	9305      	str	r3, [sp, #20]
 80041fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042c4 <_svfiprintf_r+0x1f8>
 8004200:	7821      	ldrb	r1, [r4, #0]
 8004202:	2203      	movs	r2, #3
 8004204:	4650      	mov	r0, sl
 8004206:	f7fb ffe3 	bl	80001d0 <memchr>
 800420a:	b138      	cbz	r0, 800421c <_svfiprintf_r+0x150>
 800420c:	9b04      	ldr	r3, [sp, #16]
 800420e:	eba0 000a 	sub.w	r0, r0, sl
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	4082      	lsls	r2, r0
 8004216:	4313      	orrs	r3, r2
 8004218:	3401      	adds	r4, #1
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004220:	4825      	ldr	r0, [pc, #148]	; (80042b8 <_svfiprintf_r+0x1ec>)
 8004222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004226:	2206      	movs	r2, #6
 8004228:	f7fb ffd2 	bl	80001d0 <memchr>
 800422c:	2800      	cmp	r0, #0
 800422e:	d038      	beq.n	80042a2 <_svfiprintf_r+0x1d6>
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <_svfiprintf_r+0x1f0>)
 8004232:	bb1b      	cbnz	r3, 800427c <_svfiprintf_r+0x1b0>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	3307      	adds	r3, #7
 8004238:	f023 0307 	bic.w	r3, r3, #7
 800423c:	3308      	adds	r3, #8
 800423e:	9303      	str	r3, [sp, #12]
 8004240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004242:	4433      	add	r3, r6
 8004244:	9309      	str	r3, [sp, #36]	; 0x24
 8004246:	e768      	b.n	800411a <_svfiprintf_r+0x4e>
 8004248:	fb0c 3202 	mla	r2, ip, r2, r3
 800424c:	460c      	mov	r4, r1
 800424e:	2001      	movs	r0, #1
 8004250:	e7a6      	b.n	80041a0 <_svfiprintf_r+0xd4>
 8004252:	2300      	movs	r3, #0
 8004254:	3401      	adds	r4, #1
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	4619      	mov	r1, r3
 800425a:	f04f 0c0a 	mov.w	ip, #10
 800425e:	4620      	mov	r0, r4
 8004260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004264:	3a30      	subs	r2, #48	; 0x30
 8004266:	2a09      	cmp	r2, #9
 8004268:	d903      	bls.n	8004272 <_svfiprintf_r+0x1a6>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0c6      	beq.n	80041fc <_svfiprintf_r+0x130>
 800426e:	9105      	str	r1, [sp, #20]
 8004270:	e7c4      	b.n	80041fc <_svfiprintf_r+0x130>
 8004272:	fb0c 2101 	mla	r1, ip, r1, r2
 8004276:	4604      	mov	r4, r0
 8004278:	2301      	movs	r3, #1
 800427a:	e7f0      	b.n	800425e <_svfiprintf_r+0x192>
 800427c:	ab03      	add	r3, sp, #12
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	462a      	mov	r2, r5
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <_svfiprintf_r+0x1f4>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	4638      	mov	r0, r7
 8004288:	f3af 8000 	nop.w
 800428c:	1c42      	adds	r2, r0, #1
 800428e:	4606      	mov	r6, r0
 8004290:	d1d6      	bne.n	8004240 <_svfiprintf_r+0x174>
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	065b      	lsls	r3, r3, #25
 8004296:	f53f af2d 	bmi.w	80040f4 <_svfiprintf_r+0x28>
 800429a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429c:	b01d      	add	sp, #116	; 0x74
 800429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a2:	ab03      	add	r3, sp, #12
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	462a      	mov	r2, r5
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_svfiprintf_r+0x1f4>)
 80042aa:	a904      	add	r1, sp, #16
 80042ac:	4638      	mov	r0, r7
 80042ae:	f000 f879 	bl	80043a4 <_printf_i>
 80042b2:	e7eb      	b.n	800428c <_svfiprintf_r+0x1c0>
 80042b4:	08004980 	.word	0x08004980
 80042b8:	0800498a 	.word	0x0800498a
 80042bc:	00000000 	.word	0x00000000
 80042c0:	08004019 	.word	0x08004019
 80042c4:	08004986 	.word	0x08004986

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfb8      	it	lt
 80042dc:	4613      	movlt	r3, r2
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e4:	4607      	mov	r7, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc26      	bgt.n	800435e <_printf_common+0x96>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d42b      	bmi.n	8004378 <_printf_common+0xb0>
 8004320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d01e      	beq.n	800436c <_printf_common+0xa4>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf02      	ittt	eq
 800433a:	68e5      	ldreq	r5, [r4, #12]
 800433c:	6833      	ldreq	r3, [r6, #0]
 800433e:	1aed      	subeq	r5, r5, r3
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	bf0c      	ite	eq
 8004344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004348:	2500      	movne	r5, #0
 800434a:	4293      	cmp	r3, r2
 800434c:	bfc4      	itt	gt
 800434e:	1a9b      	subgt	r3, r3, r2
 8004350:	18ed      	addgt	r5, r5, r3
 8004352:	2600      	movs	r6, #0
 8004354:	341a      	adds	r4, #26
 8004356:	42b5      	cmp	r5, r6
 8004358:	d11a      	bne.n	8004390 <_printf_common+0xc8>
 800435a:	2000      	movs	r0, #0
 800435c:	e008      	b.n	8004370 <_printf_common+0xa8>
 800435e:	2301      	movs	r3, #1
 8004360:	4652      	mov	r2, sl
 8004362:	4649      	mov	r1, r9
 8004364:	4638      	mov	r0, r7
 8004366:	47c0      	blx	r8
 8004368:	3001      	adds	r0, #1
 800436a:	d103      	bne.n	8004374 <_printf_common+0xac>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	3501      	adds	r5, #1
 8004376:	e7c6      	b.n	8004306 <_printf_common+0x3e>
 8004378:	18e1      	adds	r1, r4, r3
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004382:	4422      	add	r2, r4
 8004384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800438c:	3302      	adds	r3, #2
 800438e:	e7c7      	b.n	8004320 <_printf_common+0x58>
 8004390:	2301      	movs	r3, #1
 8004392:	4622      	mov	r2, r4
 8004394:	4649      	mov	r1, r9
 8004396:	4638      	mov	r0, r7
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d0e6      	beq.n	800436c <_printf_common+0xa4>
 800439e:	3601      	adds	r6, #1
 80043a0:	e7d9      	b.n	8004356 <_printf_common+0x8e>
	...

080043a4 <_printf_i>:
 80043a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	7e0f      	ldrb	r7, [r1, #24]
 80043aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ac:	2f78      	cmp	r7, #120	; 0x78
 80043ae:	4691      	mov	r9, r2
 80043b0:	4680      	mov	r8, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	469a      	mov	sl, r3
 80043b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ba:	d807      	bhi.n	80043cc <_printf_i+0x28>
 80043bc:	2f62      	cmp	r7, #98	; 0x62
 80043be:	d80a      	bhi.n	80043d6 <_printf_i+0x32>
 80043c0:	2f00      	cmp	r7, #0
 80043c2:	f000 80d4 	beq.w	800456e <_printf_i+0x1ca>
 80043c6:	2f58      	cmp	r7, #88	; 0x58
 80043c8:	f000 80c0 	beq.w	800454c <_printf_i+0x1a8>
 80043cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d4:	e03a      	b.n	800444c <_printf_i+0xa8>
 80043d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043da:	2b15      	cmp	r3, #21
 80043dc:	d8f6      	bhi.n	80043cc <_printf_i+0x28>
 80043de:	a101      	add	r1, pc, #4	; (adr r1, 80043e4 <_printf_i+0x40>)
 80043e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	08004451 	.word	0x08004451
 80043ec:	080043cd 	.word	0x080043cd
 80043f0:	080043cd 	.word	0x080043cd
 80043f4:	080043cd 	.word	0x080043cd
 80043f8:	080043cd 	.word	0x080043cd
 80043fc:	08004451 	.word	0x08004451
 8004400:	080043cd 	.word	0x080043cd
 8004404:	080043cd 	.word	0x080043cd
 8004408:	080043cd 	.word	0x080043cd
 800440c:	080043cd 	.word	0x080043cd
 8004410:	08004555 	.word	0x08004555
 8004414:	0800447d 	.word	0x0800447d
 8004418:	0800450f 	.word	0x0800450f
 800441c:	080043cd 	.word	0x080043cd
 8004420:	080043cd 	.word	0x080043cd
 8004424:	08004577 	.word	0x08004577
 8004428:	080043cd 	.word	0x080043cd
 800442c:	0800447d 	.word	0x0800447d
 8004430:	080043cd 	.word	0x080043cd
 8004434:	080043cd 	.word	0x080043cd
 8004438:	08004517 	.word	0x08004517
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	602a      	str	r2, [r5, #0]
 8004444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444c:	2301      	movs	r3, #1
 800444e:	e09f      	b.n	8004590 <_printf_i+0x1ec>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	682b      	ldr	r3, [r5, #0]
 8004454:	0607      	lsls	r7, r0, #24
 8004456:	f103 0104 	add.w	r1, r3, #4
 800445a:	6029      	str	r1, [r5, #0]
 800445c:	d501      	bpl.n	8004462 <_printf_i+0xbe>
 800445e:	681e      	ldr	r6, [r3, #0]
 8004460:	e003      	b.n	800446a <_printf_i+0xc6>
 8004462:	0646      	lsls	r6, r0, #25
 8004464:	d5fb      	bpl.n	800445e <_printf_i+0xba>
 8004466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800446a:	2e00      	cmp	r6, #0
 800446c:	da03      	bge.n	8004476 <_printf_i+0xd2>
 800446e:	232d      	movs	r3, #45	; 0x2d
 8004470:	4276      	negs	r6, r6
 8004472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004476:	485a      	ldr	r0, [pc, #360]	; (80045e0 <_printf_i+0x23c>)
 8004478:	230a      	movs	r3, #10
 800447a:	e012      	b.n	80044a2 <_printf_i+0xfe>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	0605      	lsls	r5, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xe8>
 8004488:	681e      	ldr	r6, [r3, #0]
 800448a:	e002      	b.n	8004492 <_printf_i+0xee>
 800448c:	0641      	lsls	r1, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xe4>
 8004490:	881e      	ldrh	r6, [r3, #0]
 8004492:	4853      	ldr	r0, [pc, #332]	; (80045e0 <_printf_i+0x23c>)
 8004494:	2f6f      	cmp	r7, #111	; 0x6f
 8004496:	bf0c      	ite	eq
 8004498:	2308      	moveq	r3, #8
 800449a:	230a      	movne	r3, #10
 800449c:	2100      	movs	r1, #0
 800449e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a2:	6865      	ldr	r5, [r4, #4]
 80044a4:	60a5      	str	r5, [r4, #8]
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	bfa2      	ittt	ge
 80044aa:	6821      	ldrge	r1, [r4, #0]
 80044ac:	f021 0104 	bicge.w	r1, r1, #4
 80044b0:	6021      	strge	r1, [r4, #0]
 80044b2:	b90e      	cbnz	r6, 80044b8 <_printf_i+0x114>
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d04b      	beq.n	8004550 <_printf_i+0x1ac>
 80044b8:	4615      	mov	r5, r2
 80044ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80044be:	fb03 6711 	mls	r7, r3, r1, r6
 80044c2:	5dc7      	ldrb	r7, [r0, r7]
 80044c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c8:	4637      	mov	r7, r6
 80044ca:	42bb      	cmp	r3, r7
 80044cc:	460e      	mov	r6, r1
 80044ce:	d9f4      	bls.n	80044ba <_printf_i+0x116>
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <_printf_i+0x148>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	07de      	lsls	r6, r3, #31
 80044d8:	d508      	bpl.n	80044ec <_printf_i+0x148>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6861      	ldr	r1, [r4, #4]
 80044de:	4299      	cmp	r1, r3
 80044e0:	bfde      	ittt	le
 80044e2:	2330      	movle	r3, #48	; 0x30
 80044e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ec:	1b52      	subs	r2, r2, r5
 80044ee:	6122      	str	r2, [r4, #16]
 80044f0:	f8cd a000 	str.w	sl, [sp]
 80044f4:	464b      	mov	r3, r9
 80044f6:	aa03      	add	r2, sp, #12
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff fee4 	bl	80042c8 <_printf_common>
 8004500:	3001      	adds	r0, #1
 8004502:	d14a      	bne.n	800459a <_printf_i+0x1f6>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f043 0320 	orr.w	r3, r3, #32
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	4833      	ldr	r0, [pc, #204]	; (80045e4 <_printf_i+0x240>)
 8004518:	2778      	movs	r7, #120	; 0x78
 800451a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6829      	ldr	r1, [r5, #0]
 8004522:	061f      	lsls	r7, r3, #24
 8004524:	f851 6b04 	ldr.w	r6, [r1], #4
 8004528:	d402      	bmi.n	8004530 <_printf_i+0x18c>
 800452a:	065f      	lsls	r7, r3, #25
 800452c:	bf48      	it	mi
 800452e:	b2b6      	uxthmi	r6, r6
 8004530:	07df      	lsls	r7, r3, #31
 8004532:	bf48      	it	mi
 8004534:	f043 0320 	orrmi.w	r3, r3, #32
 8004538:	6029      	str	r1, [r5, #0]
 800453a:	bf48      	it	mi
 800453c:	6023      	strmi	r3, [r4, #0]
 800453e:	b91e      	cbnz	r6, 8004548 <_printf_i+0x1a4>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2310      	movs	r3, #16
 800454a:	e7a7      	b.n	800449c <_printf_i+0xf8>
 800454c:	4824      	ldr	r0, [pc, #144]	; (80045e0 <_printf_i+0x23c>)
 800454e:	e7e4      	b.n	800451a <_printf_i+0x176>
 8004550:	4615      	mov	r5, r2
 8004552:	e7bd      	b.n	80044d0 <_printf_i+0x12c>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	6826      	ldr	r6, [r4, #0]
 8004558:	6961      	ldr	r1, [r4, #20]
 800455a:	1d18      	adds	r0, r3, #4
 800455c:	6028      	str	r0, [r5, #0]
 800455e:	0635      	lsls	r5, r6, #24
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	d501      	bpl.n	8004568 <_printf_i+0x1c4>
 8004564:	6019      	str	r1, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0x1ca>
 8004568:	0670      	lsls	r0, r6, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0x1c0>
 800456c:	8019      	strh	r1, [r3, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	4615      	mov	r5, r2
 8004574:	e7bc      	b.n	80044f0 <_printf_i+0x14c>
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	602a      	str	r2, [r5, #0]
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	2100      	movs	r1, #0
 8004582:	4628      	mov	r0, r5
 8004584:	f7fb fe24 	bl	80001d0 <memchr>
 8004588:	b108      	cbz	r0, 800458e <_printf_i+0x1ea>
 800458a:	1b40      	subs	r0, r0, r5
 800458c:	6060      	str	r0, [r4, #4]
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	2300      	movs	r3, #0
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	e7aa      	b.n	80044f0 <_printf_i+0x14c>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	462a      	mov	r2, r5
 800459e:	4649      	mov	r1, r9
 80045a0:	4640      	mov	r0, r8
 80045a2:	47d0      	blx	sl
 80045a4:	3001      	adds	r0, #1
 80045a6:	d0ad      	beq.n	8004504 <_printf_i+0x160>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	079b      	lsls	r3, r3, #30
 80045ac:	d413      	bmi.n	80045d6 <_printf_i+0x232>
 80045ae:	68e0      	ldr	r0, [r4, #12]
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	4298      	cmp	r0, r3
 80045b4:	bfb8      	it	lt
 80045b6:	4618      	movlt	r0, r3
 80045b8:	e7a6      	b.n	8004508 <_printf_i+0x164>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4632      	mov	r2, r6
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	47d0      	blx	sl
 80045c4:	3001      	adds	r0, #1
 80045c6:	d09d      	beq.n	8004504 <_printf_i+0x160>
 80045c8:	3501      	adds	r5, #1
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	9903      	ldr	r1, [sp, #12]
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dcf2      	bgt.n	80045ba <_printf_i+0x216>
 80045d4:	e7eb      	b.n	80045ae <_printf_i+0x20a>
 80045d6:	2500      	movs	r5, #0
 80045d8:	f104 0619 	add.w	r6, r4, #25
 80045dc:	e7f5      	b.n	80045ca <_printf_i+0x226>
 80045de:	bf00      	nop
 80045e0:	08004991 	.word	0x08004991
 80045e4:	080049a2 	.word	0x080049a2

080045e8 <__sflush_r>:
 80045e8:	898a      	ldrh	r2, [r1, #12]
 80045ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	0710      	lsls	r0, r2, #28
 80045f2:	460c      	mov	r4, r1
 80045f4:	d458      	bmi.n	80046a8 <__sflush_r+0xc0>
 80045f6:	684b      	ldr	r3, [r1, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	dc05      	bgt.n	8004608 <__sflush_r+0x20>
 80045fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dc02      	bgt.n	8004608 <__sflush_r+0x20>
 8004602:	2000      	movs	r0, #0
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800460a:	2e00      	cmp	r6, #0
 800460c:	d0f9      	beq.n	8004602 <__sflush_r+0x1a>
 800460e:	2300      	movs	r3, #0
 8004610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004614:	682f      	ldr	r7, [r5, #0]
 8004616:	6a21      	ldr	r1, [r4, #32]
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	d032      	beq.n	8004682 <__sflush_r+0x9a>
 800461c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	075a      	lsls	r2, r3, #29
 8004622:	d505      	bpl.n	8004630 <__sflush_r+0x48>
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	1ac0      	subs	r0, r0, r3
 8004628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800462a:	b10b      	cbz	r3, 8004630 <__sflush_r+0x48>
 800462c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800462e:	1ac0      	subs	r0, r0, r3
 8004630:	2300      	movs	r3, #0
 8004632:	4602      	mov	r2, r0
 8004634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004636:	6a21      	ldr	r1, [r4, #32]
 8004638:	4628      	mov	r0, r5
 800463a:	47b0      	blx	r6
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	d106      	bne.n	8004650 <__sflush_r+0x68>
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	291d      	cmp	r1, #29
 8004646:	d82b      	bhi.n	80046a0 <__sflush_r+0xb8>
 8004648:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <__sflush_r+0x108>)
 800464a:	410a      	asrs	r2, r1
 800464c:	07d6      	lsls	r6, r2, #31
 800464e:	d427      	bmi.n	80046a0 <__sflush_r+0xb8>
 8004650:	2200      	movs	r2, #0
 8004652:	6062      	str	r2, [r4, #4]
 8004654:	04d9      	lsls	r1, r3, #19
 8004656:	6922      	ldr	r2, [r4, #16]
 8004658:	6022      	str	r2, [r4, #0]
 800465a:	d504      	bpl.n	8004666 <__sflush_r+0x7e>
 800465c:	1c42      	adds	r2, r0, #1
 800465e:	d101      	bne.n	8004664 <__sflush_r+0x7c>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b903      	cbnz	r3, 8004666 <__sflush_r+0x7e>
 8004664:	6560      	str	r0, [r4, #84]	; 0x54
 8004666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004668:	602f      	str	r7, [r5, #0]
 800466a:	2900      	cmp	r1, #0
 800466c:	d0c9      	beq.n	8004602 <__sflush_r+0x1a>
 800466e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004672:	4299      	cmp	r1, r3
 8004674:	d002      	beq.n	800467c <__sflush_r+0x94>
 8004676:	4628      	mov	r0, r5
 8004678:	f7ff fc82 	bl	8003f80 <_free_r>
 800467c:	2000      	movs	r0, #0
 800467e:	6360      	str	r0, [r4, #52]	; 0x34
 8004680:	e7c0      	b.n	8004604 <__sflush_r+0x1c>
 8004682:	2301      	movs	r3, #1
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	1c41      	adds	r1, r0, #1
 800468a:	d1c8      	bne.n	800461e <__sflush_r+0x36>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0c5      	beq.n	800461e <__sflush_r+0x36>
 8004692:	2b1d      	cmp	r3, #29
 8004694:	d001      	beq.n	800469a <__sflush_r+0xb2>
 8004696:	2b16      	cmp	r3, #22
 8004698:	d101      	bne.n	800469e <__sflush_r+0xb6>
 800469a:	602f      	str	r7, [r5, #0]
 800469c:	e7b1      	b.n	8004602 <__sflush_r+0x1a>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	e7ad      	b.n	8004604 <__sflush_r+0x1c>
 80046a8:	690f      	ldr	r7, [r1, #16]
 80046aa:	2f00      	cmp	r7, #0
 80046ac:	d0a9      	beq.n	8004602 <__sflush_r+0x1a>
 80046ae:	0793      	lsls	r3, r2, #30
 80046b0:	680e      	ldr	r6, [r1, #0]
 80046b2:	bf08      	it	eq
 80046b4:	694b      	ldreq	r3, [r1, #20]
 80046b6:	600f      	str	r7, [r1, #0]
 80046b8:	bf18      	it	ne
 80046ba:	2300      	movne	r3, #0
 80046bc:	eba6 0807 	sub.w	r8, r6, r7
 80046c0:	608b      	str	r3, [r1, #8]
 80046c2:	f1b8 0f00 	cmp.w	r8, #0
 80046c6:	dd9c      	ble.n	8004602 <__sflush_r+0x1a>
 80046c8:	6a21      	ldr	r1, [r4, #32]
 80046ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046cc:	4643      	mov	r3, r8
 80046ce:	463a      	mov	r2, r7
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b0      	blx	r6
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dc06      	bgt.n	80046e6 <__sflush_r+0xfe>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e78e      	b.n	8004604 <__sflush_r+0x1c>
 80046e6:	4407      	add	r7, r0
 80046e8:	eba8 0800 	sub.w	r8, r8, r0
 80046ec:	e7e9      	b.n	80046c2 <__sflush_r+0xda>
 80046ee:	bf00      	nop
 80046f0:	dfbffffe 	.word	0xdfbffffe

080046f4 <_fflush_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	690b      	ldr	r3, [r1, #16]
 80046f8:	4605      	mov	r5, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	b913      	cbnz	r3, 8004704 <_fflush_r+0x10>
 80046fe:	2500      	movs	r5, #0
 8004700:	4628      	mov	r0, r5
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	b118      	cbz	r0, 800470e <_fflush_r+0x1a>
 8004706:	6a03      	ldr	r3, [r0, #32]
 8004708:	b90b      	cbnz	r3, 800470e <_fflush_r+0x1a>
 800470a:	f7ff fa15 	bl	8003b38 <__sinit>
 800470e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f3      	beq.n	80046fe <_fflush_r+0xa>
 8004716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004718:	07d0      	lsls	r0, r2, #31
 800471a:	d404      	bmi.n	8004726 <_fflush_r+0x32>
 800471c:	0599      	lsls	r1, r3, #22
 800471e:	d402      	bmi.n	8004726 <_fflush_r+0x32>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f7ff fc1c 	bl	8003f5e <__retarget_lock_acquire_recursive>
 8004726:	4628      	mov	r0, r5
 8004728:	4621      	mov	r1, r4
 800472a:	f7ff ff5d 	bl	80045e8 <__sflush_r>
 800472e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004730:	07da      	lsls	r2, r3, #31
 8004732:	4605      	mov	r5, r0
 8004734:	d4e4      	bmi.n	8004700 <_fflush_r+0xc>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	059b      	lsls	r3, r3, #22
 800473a:	d4e1      	bmi.n	8004700 <_fflush_r+0xc>
 800473c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473e:	f7ff fc0f 	bl	8003f60 <__retarget_lock_release_recursive>
 8004742:	e7dd      	b.n	8004700 <_fflush_r+0xc>

08004744 <__swhatbuf_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	460c      	mov	r4, r1
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	2900      	cmp	r1, #0
 800474e:	b096      	sub	sp, #88	; 0x58
 8004750:	4615      	mov	r5, r2
 8004752:	461e      	mov	r6, r3
 8004754:	da0d      	bge.n	8004772 <__swhatbuf_r+0x2e>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	bf0c      	ite	eq
 8004762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004766:	2340      	movne	r3, #64	; 0x40
 8004768:	2000      	movs	r0, #0
 800476a:	6031      	str	r1, [r6, #0]
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	b016      	add	sp, #88	; 0x58
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	466a      	mov	r2, sp
 8004774:	f000 f862 	bl	800483c <_fstat_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	dbec      	blt.n	8004756 <__swhatbuf_r+0x12>
 800477c:	9901      	ldr	r1, [sp, #4]
 800477e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004786:	4259      	negs	r1, r3
 8004788:	4159      	adcs	r1, r3
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	e7eb      	b.n	8004768 <__swhatbuf_r+0x24>

08004790 <__smakebuf_r>:
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004794:	079d      	lsls	r5, r3, #30
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	d507      	bpl.n	80047ac <__smakebuf_r+0x1c>
 800479c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	2301      	movs	r3, #1
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	b002      	add	sp, #8
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	ab01      	add	r3, sp, #4
 80047ae:	466a      	mov	r2, sp
 80047b0:	f7ff ffc8 	bl	8004744 <__swhatbuf_r>
 80047b4:	9900      	ldr	r1, [sp, #0]
 80047b6:	4605      	mov	r5, r0
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7ff f8a5 	bl	8003908 <_malloc_r>
 80047be:	b948      	cbnz	r0, 80047d4 <__smakebuf_r+0x44>
 80047c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c4:	059a      	lsls	r2, r3, #22
 80047c6:	d4ef      	bmi.n	80047a8 <__smakebuf_r+0x18>
 80047c8:	f023 0303 	bic.w	r3, r3, #3
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	e7e3      	b.n	800479c <__smakebuf_r+0xc>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	6020      	str	r0, [r4, #0]
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	6163      	str	r3, [r4, #20]
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	6120      	str	r0, [r4, #16]
 80047e6:	b15b      	cbz	r3, 8004800 <__smakebuf_r+0x70>
 80047e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f837 	bl	8004860 <_isatty_r>
 80047f2:	b128      	cbz	r0, 8004800 <__smakebuf_r+0x70>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	431d      	orrs	r5, r3
 8004804:	81a5      	strh	r5, [r4, #12]
 8004806:	e7cf      	b.n	80047a8 <__smakebuf_r+0x18>

08004808 <memmove>:
 8004808:	4288      	cmp	r0, r1
 800480a:	b510      	push	{r4, lr}
 800480c:	eb01 0402 	add.w	r4, r1, r2
 8004810:	d902      	bls.n	8004818 <memmove+0x10>
 8004812:	4284      	cmp	r4, r0
 8004814:	4623      	mov	r3, r4
 8004816:	d807      	bhi.n	8004828 <memmove+0x20>
 8004818:	1e43      	subs	r3, r0, #1
 800481a:	42a1      	cmp	r1, r4
 800481c:	d008      	beq.n	8004830 <memmove+0x28>
 800481e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004826:	e7f8      	b.n	800481a <memmove+0x12>
 8004828:	4402      	add	r2, r0
 800482a:	4601      	mov	r1, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	d100      	bne.n	8004832 <memmove+0x2a>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483a:	e7f7      	b.n	800482c <memmove+0x24>

0800483c <_fstat_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	; (800485c <_fstat_r+0x20>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	f7fc ff5f 	bl	800170c <_fstat>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d102      	bne.n	8004858 <_fstat_r+0x1c>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	b103      	cbz	r3, 8004858 <_fstat_r+0x1c>
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	bd38      	pop	{r3, r4, r5, pc}
 800485a:	bf00      	nop
 800485c:	20000484 	.word	0x20000484

08004860 <_isatty_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	; (800487c <_isatty_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc ff5e 	bl	800172c <_isatty>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_isatty_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_isatty_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20000484 	.word	0x20000484

08004880 <_realloc_r>:
 8004880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	4680      	mov	r8, r0
 8004886:	4614      	mov	r4, r2
 8004888:	460e      	mov	r6, r1
 800488a:	b921      	cbnz	r1, 8004896 <_realloc_r+0x16>
 800488c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	4611      	mov	r1, r2
 8004892:	f7ff b839 	b.w	8003908 <_malloc_r>
 8004896:	b92a      	cbnz	r2, 80048a4 <_realloc_r+0x24>
 8004898:	f7ff fb72 	bl	8003f80 <_free_r>
 800489c:	4625      	mov	r5, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a4:	f000 f81b 	bl	80048de <_malloc_usable_size_r>
 80048a8:	4284      	cmp	r4, r0
 80048aa:	4607      	mov	r7, r0
 80048ac:	d802      	bhi.n	80048b4 <_realloc_r+0x34>
 80048ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048b2:	d812      	bhi.n	80048da <_realloc_r+0x5a>
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f7ff f826 	bl	8003908 <_malloc_r>
 80048bc:	4605      	mov	r5, r0
 80048be:	2800      	cmp	r0, #0
 80048c0:	d0ed      	beq.n	800489e <_realloc_r+0x1e>
 80048c2:	42bc      	cmp	r4, r7
 80048c4:	4622      	mov	r2, r4
 80048c6:	4631      	mov	r1, r6
 80048c8:	bf28      	it	cs
 80048ca:	463a      	movcs	r2, r7
 80048cc:	f7ff fb49 	bl	8003f62 <memcpy>
 80048d0:	4631      	mov	r1, r6
 80048d2:	4640      	mov	r0, r8
 80048d4:	f7ff fb54 	bl	8003f80 <_free_r>
 80048d8:	e7e1      	b.n	800489e <_realloc_r+0x1e>
 80048da:	4635      	mov	r5, r6
 80048dc:	e7df      	b.n	800489e <_realloc_r+0x1e>

080048de <_malloc_usable_size_r>:
 80048de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e2:	1f18      	subs	r0, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfbc      	itt	lt
 80048e8:	580b      	ldrlt	r3, [r1, r0]
 80048ea:	18c0      	addlt	r0, r0, r3
 80048ec:	4770      	bx	lr
	...

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
